{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"lib.rs","byte_start":195,"byte_end":225,"line_start":8,"line_end":8,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"#![feature(label_break_value)]","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the feature `label_break_value` has been stable since `1.65.0` and no longer requires an attribute to enable","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"remove the attribute","code":null,"level":"help","spans":[{"file_name":"lib.rs","byte_start":195,"byte_end":225,"line_start":8,"line_end":8,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"#![feature(label_break_value)]","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib.rs:8:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(label_break_value)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: remove the attribute\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the feature `label_break_value` has been stable since `1.65.0` and no longer requires an attribute to enable\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"lib.rs","byte_start":226,"byte_end":252,"line_start":9,"line_end":9,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"#![feature(register_tool)]","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib.rs:9:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(register_tool)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"lib.rs","byte_start":279,"byte_end":309,"line_start":11,"line_end":11,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"#![feature(strict_provenance)]","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib.rs:11:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(strict_provenance)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"lib.rs","byte_start":310,"byte_end":338,"line_start":12,"line_end":12,"column_start":1,"column_end":29,"is_primary":true,"text":[{"text":"#![feature(core_intrinsics)]","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib.rs:12:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(core_intrinsics)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"lib.rs","byte_start":339,"byte_end":362,"line_start":13,"line_end":13,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"#![feature(raw_ref_op)]","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib.rs:13:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(raw_ref_op)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"src/binn.rs","byte_start":21974,"byte_end":22205,"line_start":743,"line_end":748,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                if strncasecmp(p as *mut i8, key, len as u64) == 0 {","highlight_start":17,"highlight_end":69},{"text":"                    if keylen == len as i32 {","highlight_start":1,"highlight_end":46},{"text":"                        p = p.offset(len as i32 as isize);","highlight_start":1,"highlight_end":59},{"text":"                        return p;","highlight_start":1,"highlight_end":34},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::collapsible_if)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"src/binn.rs","byte_start":21974,"byte_end":22205,"line_start":743,"line_end":748,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"                if strncasecmp(p as *mut i8, key, len as u64) == 0 {","highlight_start":17,"highlight_end":69},{"text":"                    if keylen == len as i32 {","highlight_start":1,"highlight_end":46},{"text":"                        p = p.offset(len as i32 as isize);","highlight_start":1,"highlight_end":59},{"text":"                        return p;","highlight_start":1,"highlight_end":34},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18}],"label":null,"suggested_replacement":"if strncasecmp(p as *mut i8, key, len as u64) == 0 && keylen == len as i32 {\n                    p = p.offset(len as i32 as isize);\n                    return p;\n                }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binn.rs:743:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m743\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if strncasecmp(p as *mut i8, key, len as u64) == 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m744\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if keylen == len as i32 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m745\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        p = p.offset(len as i32 as isize);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m746\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        return p;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m747\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m748\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::collapsible_if)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m743\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[38;5;10mif strncasecmp(p as *mut i8, key, len as u64) == 0 && keylen == len as i32 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m744\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     p = p.offset(len as i32 as isize);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m745\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     return p;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m746\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"src/binn.rs","byte_start":43681,"byte_end":43798,"line_start":1489,"line_end":1493,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if !psize.is_null() && *psize > 0 {","highlight_start":9,"highlight_end":44},{"text":"            if size != *psize {","highlight_start":1,"highlight_end":32},{"text":"                return 0;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"src/binn.rs","byte_start":43681,"byte_end":43798,"line_start":1489,"line_end":1493,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if !psize.is_null() && *psize > 0 {","highlight_start":9,"highlight_end":44},{"text":"            if size != *psize {","highlight_start":1,"highlight_end":32},{"text":"                return 0;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"if !psize.is_null() && *psize > 0 && size != *psize {\n            return 0;\n        }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binn.rs:1489:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if !psize.is_null() && *psize > 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1490\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if size != *psize {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1491\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                return 0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1492\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1493\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1489\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mif !psize.is_null() && *psize > 0 && size != *psize {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1490\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             return 0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1491\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"src/binn.rs","byte_start":43807,"byte_end":43928,"line_start":1494,"line_end":1498,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if !pcount.is_null() && *pcount > 0 {","highlight_start":9,"highlight_end":46},{"text":"            if count != *pcount {","highlight_start":1,"highlight_end":34},{"text":"                return 0;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"src/binn.rs","byte_start":43807,"byte_end":43928,"line_start":1494,"line_end":1498,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if !pcount.is_null() && *pcount > 0 {","highlight_start":9,"highlight_end":46},{"text":"            if count != *pcount {","highlight_start":1,"highlight_end":34},{"text":"                return 0;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"if !pcount.is_null() && *pcount > 0 && count != *pcount {\n            return 0;\n        }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binn.rs:1494:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1494\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if !pcount.is_null() && *pcount > 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if count != *pcount {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1496\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                return 0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1497\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1498\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1494\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mif !pcount.is_null() && *pcount > 0 && count != *pcount {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             return 0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1496\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"src/binn.rs","byte_start":43937,"byte_end":44057,"line_start":1499,"line_end":1503,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if !ptype.is_null() && *ptype != 0 {","highlight_start":9,"highlight_end":45},{"text":"            if type_0 != *ptype {","highlight_start":1,"highlight_end":34},{"text":"                return 0;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"src/binn.rs","byte_start":43937,"byte_end":44057,"line_start":1499,"line_end":1503,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if !ptype.is_null() && *ptype != 0 {","highlight_start":9,"highlight_end":45},{"text":"            if type_0 != *ptype {","highlight_start":1,"highlight_end":34},{"text":"                return 0;","highlight_start":1,"highlight_end":26},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"if !ptype.is_null() && *ptype != 0 && type_0 != *ptype {\n            return 0;\n        }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binn.rs:1499:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1499\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if !ptype.is_null() && *ptype != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1500\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if type_0 != *ptype {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                return 0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1502\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1503\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1499\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mif !ptype.is_null() && *ptype != 0 && type_0 != *ptype {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1500\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             return 0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1501\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"src/binn.rs","byte_start":113412,"byte_end":114736,"line_start":4062,"line_end":4087,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if !(strcasecmp(str, b\"true\\0\" as *const u8 as *const i8) == 0) {","highlight_start":9,"highlight_end":74},{"text":"            if !(strcasecmp(str, b\"yes\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":77},{"text":"                if !(strcasecmp(str, b\"on\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":80},{"text":"                    if !(strcasecmp(str, b\"false\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":87},{"text":"                        if !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":88},{"text":"                            if !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":93},{"text":"                                if is_integer(str) != 0 {","highlight_start":1,"highlight_end":58},{"text":"                                    vint = atoi64(str);","highlight_start":1,"highlight_end":56},{"text":"                                    *pbool = if vint != 0 { 1 } else { 0 };","highlight_start":1,"highlight_end":76},{"text":"                                    return 1;","highlight_start":1,"highlight_end":46},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    if is_float(str) != 0 {","highlight_start":1,"highlight_end":60},{"text":"                                        vdouble = atof(str);","highlight_start":1,"highlight_end":61},{"text":"                                        *pbool = if vdouble != 0 as f64 { 1 } else { 0 };","highlight_start":1,"highlight_end":90},{"text":"                                        return 1;","highlight_start":1,"highlight_end":50},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                return 0;","highlight_start":1,"highlight_end":42},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    *pbool = 0;","highlight_start":1,"highlight_end":32},{"text":"                    return 1;","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"src/binn.rs","byte_start":113412,"byte_end":114736,"line_start":4062,"line_end":4087,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if !(strcasecmp(str, b\"true\\0\" as *const u8 as *const i8) == 0) {","highlight_start":9,"highlight_end":74},{"text":"            if !(strcasecmp(str, b\"yes\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":77},{"text":"                if !(strcasecmp(str, b\"on\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":80},{"text":"                    if !(strcasecmp(str, b\"false\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":87},{"text":"                        if !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":88},{"text":"                            if !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":93},{"text":"                                if is_integer(str) != 0 {","highlight_start":1,"highlight_end":58},{"text":"                                    vint = atoi64(str);","highlight_start":1,"highlight_end":56},{"text":"                                    *pbool = if vint != 0 { 1 } else { 0 };","highlight_start":1,"highlight_end":76},{"text":"                                    return 1;","highlight_start":1,"highlight_end":46},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    if is_float(str) != 0 {","highlight_start":1,"highlight_end":60},{"text":"                                        vdouble = atof(str);","highlight_start":1,"highlight_end":61},{"text":"                                        *pbool = if vdouble != 0 as f64 { 1 } else { 0 };","highlight_start":1,"highlight_end":90},{"text":"                                        return 1;","highlight_start":1,"highlight_end":50},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                return 0;","highlight_start":1,"highlight_end":42},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    *pbool = 0;","highlight_start":1,"highlight_end":32},{"text":"                    return 1;","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"if !(strcasecmp(str, b\"true\\0\" as *const u8 as *const i8) == 0) && !(strcasecmp(str, b\"yes\\0\" as *const u8 as *const i8) == 0) {\n            if !(strcasecmp(str, b\"on\\0\" as *const u8 as *const i8) == 0) {\n                if !(strcasecmp(str, b\"false\\0\" as *const u8 as *const i8) == 0) {\n                    if !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {\n                        if !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {\n                            if is_integer(str) != 0 {\n                                vint = atoi64(str);\n                                *pbool = if vint != 0 { 1 } else { 0 };\n                                return 1;\n                            } else {\n                                if is_float(str) != 0 {\n                                    vdouble = atof(str);\n                                    *pbool = if vdouble != 0 as f64 { 1 } else { 0 };\n                                    return 1;\n                                }\n                            }\n                            return 0;\n                        }\n                    }\n                }\n                *pbool = 0;\n                return 1;\n            }\n        }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binn.rs:4062:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4062\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if !(strcasecmp(str, b\"true\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4063\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if !(strcasecmp(str, b\"yes\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4064\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if !(strcasecmp(str, b\"on\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4065\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if !(strcasecmp(str, b\"false\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4086\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4087\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4062\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mif !(strcasecmp(str, b\"true\\0\" as *const u8 as *const i8) == 0) && !(strcasecmp(str, b\"yes\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4063\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             if !(strcasecmp(str, b\"on\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4064\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 if !(strcasecmp(str, b\"false\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4065\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     if !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4066\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         if !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4067\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             if is_integer(str) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4068\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 vint = atoi64(str);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4069\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 *pbool = if vint != 0 { 1 } else { 0 };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4070\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 return 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4071\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4072\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 if is_float(str) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4073\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     vdouble = atof(str);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4074\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     *pbool = if vdouble != 0 as f64 { 1 } else { 0 };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4075\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     return 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4076\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4077\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             return 0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4079\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4081\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4082\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 *pbool = 0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4083\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 return 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4084\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4085\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"src/binn.rs","byte_start":113490,"byte_end":114726,"line_start":4063,"line_end":4086,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            if !(strcasecmp(str, b\"yes\\0\" as *const u8 as *const i8) == 0) {","highlight_start":13,"highlight_end":77},{"text":"                if !(strcasecmp(str, b\"on\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":80},{"text":"                    if !(strcasecmp(str, b\"false\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":87},{"text":"                        if !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":88},{"text":"                            if !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":93},{"text":"                                if is_integer(str) != 0 {","highlight_start":1,"highlight_end":58},{"text":"                                    vint = atoi64(str);","highlight_start":1,"highlight_end":56},{"text":"                                    *pbool = if vint != 0 { 1 } else { 0 };","highlight_start":1,"highlight_end":76},{"text":"                                    return 1;","highlight_start":1,"highlight_end":46},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    if is_float(str) != 0 {","highlight_start":1,"highlight_end":60},{"text":"                                        vdouble = atof(str);","highlight_start":1,"highlight_end":61},{"text":"                                        *pbool = if vdouble != 0 as f64 { 1 } else { 0 };","highlight_start":1,"highlight_end":90},{"text":"                                        return 1;","highlight_start":1,"highlight_end":50},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                return 0;","highlight_start":1,"highlight_end":42},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    *pbool = 0;","highlight_start":1,"highlight_end":32},{"text":"                    return 1;","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"src/binn.rs","byte_start":113490,"byte_end":114726,"line_start":4063,"line_end":4086,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            if !(strcasecmp(str, b\"yes\\0\" as *const u8 as *const i8) == 0) {","highlight_start":13,"highlight_end":77},{"text":"                if !(strcasecmp(str, b\"on\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":80},{"text":"                    if !(strcasecmp(str, b\"false\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":87},{"text":"                        if !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":88},{"text":"                            if !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":93},{"text":"                                if is_integer(str) != 0 {","highlight_start":1,"highlight_end":58},{"text":"                                    vint = atoi64(str);","highlight_start":1,"highlight_end":56},{"text":"                                    *pbool = if vint != 0 { 1 } else { 0 };","highlight_start":1,"highlight_end":76},{"text":"                                    return 1;","highlight_start":1,"highlight_end":46},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    if is_float(str) != 0 {","highlight_start":1,"highlight_end":60},{"text":"                                        vdouble = atof(str);","highlight_start":1,"highlight_end":61},{"text":"                                        *pbool = if vdouble != 0 as f64 { 1 } else { 0 };","highlight_start":1,"highlight_end":90},{"text":"                                        return 1;","highlight_start":1,"highlight_end":50},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                return 0;","highlight_start":1,"highlight_end":42},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    *pbool = 0;","highlight_start":1,"highlight_end":32},{"text":"                    return 1;","highlight_start":1,"highlight_end":30},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":"if !(strcasecmp(str, b\"yes\\0\" as *const u8 as *const i8) == 0) && !(strcasecmp(str, b\"on\\0\" as *const u8 as *const i8) == 0) {\n                if !(strcasecmp(str, b\"false\\0\" as *const u8 as *const i8) == 0) {\n                    if !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {\n                        if !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {\n                            if is_integer(str) != 0 {\n                                vint = atoi64(str);\n                                *pbool = if vint != 0 { 1 } else { 0 };\n                                return 1;\n                            } else {\n                                if is_float(str) != 0 {\n                                    vdouble = atof(str);\n                                    *pbool = if vdouble != 0 as f64 { 1 } else { 0 };\n                                    return 1;\n                                }\n                            }\n                            return 0;\n                        }\n                    }\n                }\n                *pbool = 0;\n                return 1;\n            }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binn.rs:4063:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4063\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if !(strcasecmp(str, b\"yes\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4064\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if !(strcasecmp(str, b\"on\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4065\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if !(strcasecmp(str, b\"false\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4066\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        if !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4085\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4086\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4063\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[38;5;10mif !(strcasecmp(str, b\"yes\\0\" as *const u8 as *const i8) == 0) && !(strcasecmp(str, b\"on\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4064\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 if !(strcasecmp(str, b\"false\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4065\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     if !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4066\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         if !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4067\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             if is_integer(str) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4068\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 vint = atoi64(str);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4069\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 *pbool = if vint != 0 { 1 } else { 0 };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4070\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 return 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4071\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4072\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 if is_float(str) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4073\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     vdouble = atof(str);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4074\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     *pbool = if vdouble != 0 as f64 { 1 } else { 0 };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4075\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     return 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4076\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4077\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             return 0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4079\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4081\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4082\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 *pbool = 0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4083\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 return 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4084\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"src/binn.rs","byte_start":113655,"byte_end":114632,"line_start":4065,"line_end":4082,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    if !(strcasecmp(str, b\"false\\0\" as *const u8 as *const i8) == 0) {","highlight_start":21,"highlight_end":87},{"text":"                        if !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":88},{"text":"                            if !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":93},{"text":"                                if is_integer(str) != 0 {","highlight_start":1,"highlight_end":58},{"text":"                                    vint = atoi64(str);","highlight_start":1,"highlight_end":56},{"text":"                                    *pbool = if vint != 0 { 1 } else { 0 };","highlight_start":1,"highlight_end":76},{"text":"                                    return 1;","highlight_start":1,"highlight_end":46},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    if is_float(str) != 0 {","highlight_start":1,"highlight_end":60},{"text":"                                        vdouble = atof(str);","highlight_start":1,"highlight_end":61},{"text":"                                        *pbool = if vdouble != 0 as f64 { 1 } else { 0 };","highlight_start":1,"highlight_end":90},{"text":"                                        return 1;","highlight_start":1,"highlight_end":50},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                return 0;","highlight_start":1,"highlight_end":42},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"src/binn.rs","byte_start":113655,"byte_end":114632,"line_start":4065,"line_end":4082,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"                    if !(strcasecmp(str, b\"false\\0\" as *const u8 as *const i8) == 0) {","highlight_start":21,"highlight_end":87},{"text":"                        if !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":88},{"text":"                            if !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":93},{"text":"                                if is_integer(str) != 0 {","highlight_start":1,"highlight_end":58},{"text":"                                    vint = atoi64(str);","highlight_start":1,"highlight_end":56},{"text":"                                    *pbool = if vint != 0 { 1 } else { 0 };","highlight_start":1,"highlight_end":76},{"text":"                                    return 1;","highlight_start":1,"highlight_end":46},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    if is_float(str) != 0 {","highlight_start":1,"highlight_end":60},{"text":"                                        vdouble = atof(str);","highlight_start":1,"highlight_end":61},{"text":"                                        *pbool = if vdouble != 0 as f64 { 1 } else { 0 };","highlight_start":1,"highlight_end":90},{"text":"                                        return 1;","highlight_start":1,"highlight_end":50},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                return 0;","highlight_start":1,"highlight_end":42},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":"if !(strcasecmp(str, b\"false\\0\" as *const u8 as *const i8) == 0) && !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {\n                        if !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {\n                            if is_integer(str) != 0 {\n                                vint = atoi64(str);\n                                *pbool = if vint != 0 { 1 } else { 0 };\n                                return 1;\n                            } else {\n                                if is_float(str) != 0 {\n                                    vdouble = atof(str);\n                                    *pbool = if vdouble != 0 as f64 { 1 } else { 0 };\n                                    return 1;\n                                }\n                            }\n                            return 0;\n                        }\n                    }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binn.rs:4065:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4065\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if !(strcasecmp(str, b\"false\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4066\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        if !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4067\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            if !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4068\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                if is_integer(str) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4081\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4082\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4065\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[38;5;10mif !(strcasecmp(str, b\"false\\0\" as *const u8 as *const i8) == 0) && !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4066\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         if !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4067\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             if is_integer(str) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4068\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 vint = atoi64(str);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4069\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 *pbool = if vint != 0 { 1 } else { 0 };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4070\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 return 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4071\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4072\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 if is_float(str) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4073\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     vdouble = atof(str);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4074\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     *pbool = if vdouble != 0 as f64 { 1 } else { 0 };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4075\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     return 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4076\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4077\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             return 0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4079\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"src/binn.rs","byte_start":113746,"byte_end":114610,"line_start":4066,"line_end":4081,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"                        if !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {","highlight_start":25,"highlight_end":88},{"text":"                            if !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":93},{"text":"                                if is_integer(str) != 0 {","highlight_start":1,"highlight_end":58},{"text":"                                    vint = atoi64(str);","highlight_start":1,"highlight_end":56},{"text":"                                    *pbool = if vint != 0 { 1 } else { 0 };","highlight_start":1,"highlight_end":76},{"text":"                                    return 1;","highlight_start":1,"highlight_end":46},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    if is_float(str) != 0 {","highlight_start":1,"highlight_end":60},{"text":"                                        vdouble = atof(str);","highlight_start":1,"highlight_end":61},{"text":"                                        *pbool = if vdouble != 0 as f64 { 1 } else { 0 };","highlight_start":1,"highlight_end":90},{"text":"                                        return 1;","highlight_start":1,"highlight_end":50},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                return 0;","highlight_start":1,"highlight_end":42},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"src/binn.rs","byte_start":113746,"byte_end":114610,"line_start":4066,"line_end":4081,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"                        if !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {","highlight_start":25,"highlight_end":88},{"text":"                            if !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {","highlight_start":1,"highlight_end":93},{"text":"                                if is_integer(str) != 0 {","highlight_start":1,"highlight_end":58},{"text":"                                    vint = atoi64(str);","highlight_start":1,"highlight_end":56},{"text":"                                    *pbool = if vint != 0 { 1 } else { 0 };","highlight_start":1,"highlight_end":76},{"text":"                                    return 1;","highlight_start":1,"highlight_end":46},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    if is_float(str) != 0 {","highlight_start":1,"highlight_end":60},{"text":"                                        vdouble = atof(str);","highlight_start":1,"highlight_end":61},{"text":"                                        *pbool = if vdouble != 0 as f64 { 1 } else { 0 };","highlight_start":1,"highlight_end":90},{"text":"                                        return 1;","highlight_start":1,"highlight_end":50},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                return 0;","highlight_start":1,"highlight_end":42},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":"if !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) && !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {\n                            if is_integer(str) != 0 {\n                                vint = atoi64(str);\n                                *pbool = if vint != 0 { 1 } else { 0 };\n                                return 1;\n                            } else {\n                                if is_float(str) != 0 {\n                                    vdouble = atof(str);\n                                    *pbool = if vdouble != 0 as f64 { 1 } else { 0 };\n                                    return 1;\n                                }\n                            }\n                            return 0;\n                        }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binn.rs:4066:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4066\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        if !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4067\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            if !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4068\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                if is_integer(str) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4069\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                                    vint = atoi64(str);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4081\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4066\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[38;5;10mif !(strcasecmp(str, b\"no\\0\" as *const u8 as *const i8) == 0) && !(strcasecmp(str, b\"off\\0\" as *const u8 as *const i8) == 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4067\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             if is_integer(str) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4068\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 vint = atoi64(str);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4069\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 *pbool = if vint != 0 { 1 } else { 0 };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4070\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 return 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4071\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4072\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 if is_float(str) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4073\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     vdouble = atof(str);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4074\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     *pbool = if vdouble != 0 as f64 { 1 } else { 0 };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4075\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     return 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4076\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4077\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             return 0;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4079\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"this `else { if .. }` block can be collapsed","code":{"code":"clippy::collapsible_else_if","explanation":null},"level":"warning","spans":[{"file_name":"src/binn.rs","byte_start":114178,"byte_end":114512,"line_start":4072,"line_end":4078,"column_start":40,"column_end":34,"is_primary":true,"text":[{"text":"                                } else {","highlight_start":40,"highlight_end":41},{"text":"                                    if is_float(str) != 0 {","highlight_start":1,"highlight_end":60},{"text":"                                        vdouble = atof(str);","highlight_start":1,"highlight_end":61},{"text":"                                        *pbool = if vdouble != 0 as f64 { 1 } else { 0 };","highlight_start":1,"highlight_end":90},{"text":"                                        return 1;","highlight_start":1,"highlight_end":50},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::collapsible_else_if)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"src/binn.rs","byte_start":114178,"byte_end":114512,"line_start":4072,"line_end":4078,"column_start":40,"column_end":34,"is_primary":true,"text":[{"text":"                                } else {","highlight_start":40,"highlight_end":41},{"text":"                                    if is_float(str) != 0 {","highlight_start":1,"highlight_end":60},{"text":"                                        vdouble = atof(str);","highlight_start":1,"highlight_end":61},{"text":"                                        *pbool = if vdouble != 0 as f64 { 1 } else { 0 };","highlight_start":1,"highlight_end":90},{"text":"                                        return 1;","highlight_start":1,"highlight_end":50},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34}],"label":null,"suggested_replacement":"if is_float(str) != 0 {\n                                    vdouble = atof(str);\n                                    *pbool = if vdouble != 0 as f64 { 1 } else { 0 };\n                                    return 1;\n                                }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `else { if .. }` block can be collapsed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/binn.rs:4072:40\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4072\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   } else {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m______________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4073\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       if is_float(str) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4074\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                           vdouble = atof(str);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4075\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                           *pbool = if vdouble != 0 as f64 { 1 } else { 0 };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4076\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                           return 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4077\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::collapsible_else_if)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4072\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                                } else \u001b[0m\u001b[0m\u001b[38;5;10mif is_float(str) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4073\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     vdouble = atof(str);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4074\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     *pbool = if vdouble != 0 as f64 { 1 } else { 0 };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4075\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     return 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4076\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"the feature `label_break_value` has been stable since 1.65.0 and no longer requires an attribute to enable","code":{"code":"stable_features","explanation":null},"level":"warning","spans":[{"file_name":"lib.rs","byte_start":206,"byte_end":223,"line_start":8,"line_end":8,"column_start":12,"column_end":29,"is_primary":true,"text":[{"text":"#![feature(label_break_value)]","highlight_start":12,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(stable_features)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the feature `label_break_value` has been stable since 1.65.0 and no longer requires an attribute to enable\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib.rs:8:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(label_break_value)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(stable_features)]` on by default\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"lib.rs","byte_start":321,"byte_end":336,"line_start":12,"line_end":12,"column_start":12,"column_end":27,"is_primary":true,"text":[{"text":"#![feature(core_intrinsics)]","highlight_start":12,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mlib.rs:12:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(core_intrinsics)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 6 previous errors; 10 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 6 previous errors; 10 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0554`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0554`.\u001b[0m\n"}
