{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"c2rust-lib.rs","byte_start":195,"byte_end":220,"line_start":8,"line_end":8,"column_start":1,"column_end":26,"is_primary":true,"text":[{"text":"#![feature(extern_types)]","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mc2rust-lib.rs:8:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(extern_types)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"c2rust-lib.rs","byte_start":221,"byte_end":241,"line_start":9,"line_end":9,"column_start":1,"column_end":21,"is_primary":true,"text":[{"text":"#![feature(linkage)]","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mc2rust-lib.rs:9:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(linkage)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"c2rust-lib.rs","byte_start":242,"byte_end":268,"line_start":10,"line_end":10,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"#![feature(register_tool)]","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mc2rust-lib.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(register_tool)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"c2rust-lib.rs","byte_start":295,"byte_end":325,"line_start":12,"line_end":12,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"#![feature(strict_provenance)]","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mc2rust-lib.rs:12:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(strict_provenance)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"c2rust-lib.rs","byte_start":326,"byte_end":354,"line_start":13,"line_end":13,"column_start":1,"column_end":29,"is_primary":true,"text":[{"text":"#![feature(core_intrinsics)]","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mc2rust-lib.rs:13:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(core_intrinsics)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"c2rust-lib.rs","byte_start":355,"byte_end":378,"line_start":14,"line_end":14,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"#![feature(raw_ref_op)]","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mc2rust-lib.rs:14:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(raw_ref_op)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":7599,"byte_end":7634,"line_start":225,"line_end":225,"column_start":51,"column_end":86,"is_primary":true,"text":[{"text":"                            .offset(*fmap.offset((lo + hi >> 1 as std::os::raw::c_int) as isize)","highlight_start":51,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::precedence)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":7599,"byte_end":7634,"line_start":225,"line_end":225,"column_start":51,"column_end":86,"is_primary":true,"text":[{"text":"                            .offset(*fmap.offset((lo + hi >> 1 as std::os::raw::c_int) as isize)","highlight_start":51,"highlight_end":86}],"label":null,"suggested_replacement":"(lo + hi) >> 1 as std::os::raw::c_int","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:225:51\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   .offset(*fmap.offset((lo + hi >> 1 as std::os::raw::c_int) as isize)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(lo + hi) >> 1 as std::os::raw::c_int`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::precedence)]` on by default\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":14808,"byte_end":14873,"line_start":405,"line_end":405,"column_start":18,"column_end":83,"is_primary":true,"text":[{"text":"                (nblock + 2 as std::os::raw::c_int * i >> 5 as std::os::raw::c_int) as isize,","highlight_start":18,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":14808,"byte_end":14873,"line_start":405,"line_end":405,"column_start":18,"column_end":83,"is_primary":true,"text":[{"text":"                (nblock + 2 as std::os::raw::c_int * i >> 5 as std::os::raw::c_int) as isize,","highlight_start":18,"highlight_end":83}],"label":null,"suggested_replacement":"(nblock + 2 as std::os::raw::c_int * i) >> 5 as std::os::raw::c_int","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:405:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m405\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                (nblock + 2 as std::os::raw::c_int * i >> 5 as std::os::raw::c_int) as isize,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(nblock + 2 as std::os::raw::c_int * i) >> 5 as std::os::raw::c_int`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":14980,"byte_end":15045,"line_start":408,"line_end":408,"column_start":21,"column_end":86,"is_primary":true,"text":[{"text":"                << (nblock + 2 as std::os::raw::c_int * i & 31 as std::os::raw::c_int);","highlight_start":21,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":14980,"byte_end":15045,"line_start":408,"line_end":408,"column_start":21,"column_end":86,"is_primary":true,"text":[{"text":"                << (nblock + 2 as std::os::raw::c_int * i & 31 as std::os::raw::c_int);","highlight_start":21,"highlight_end":86}],"label":null,"suggested_replacement":"(nblock + 2 as std::os::raw::c_int * i) & 31 as std::os::raw::c_int","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:408:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m408\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                << (nblock + 2 as std::os::raw::c_int * i & 31 as std::os::raw::c_int);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(nblock + 2 as std::os::raw::c_int * i) & 31 as std::os::raw::c_int`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":15113,"byte_end":15225,"line_start":410,"line_end":411,"column_start":18,"column_end":48,"is_primary":true,"text":[{"text":"                (nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int","highlight_start":18,"highlight_end":82},{"text":"                    >> 5 as std::os::raw::c_int) as isize,","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":15113,"byte_end":15225,"line_start":410,"line_end":411,"column_start":18,"column_end":48,"is_primary":true,"text":[{"text":"                (nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int","highlight_start":18,"highlight_end":82},{"text":"                    >> 5 as std::os::raw::c_int) as isize,","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":"(nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int) >> 5 as std::os::raw::c_int","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:410:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m410\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                (nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m__________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m411\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    >> 5 as std::os::raw::c_int) as isize,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int) >> 5 as std::os::raw::c_int`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":15334,"byte_end":15446,"line_start":414,"line_end":415,"column_start":21,"column_end":48,"is_primary":true,"text":[{"text":"                << (nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int","highlight_start":21,"highlight_end":85},{"text":"                    & 31 as std::os::raw::c_int));","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":15334,"byte_end":15446,"line_start":414,"line_end":415,"column_start":21,"column_end":48,"is_primary":true,"text":[{"text":"                << (nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int","highlight_start":21,"highlight_end":85},{"text":"                    & 31 as std::os::raw::c_int));","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":"(nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int) & 31 as std::os::raw::c_int","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:414:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m                << (nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m415\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    & 31 as std::os::raw::c_int));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________________________________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(nblock + 2 as std::os::raw::c_int * i + 1 as std::os::raw::c_int) & 31 as std::os::raw::c_int`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":38177,"byte_end":38212,"line_start":990,"line_end":990,"column_start":39,"column_end":74,"is_primary":true,"text":[{"text":"                        (*ptr.offset((lo + hi >> 1 as std::os::raw::c_int) as isize))","highlight_start":39,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":38177,"byte_end":38212,"line_start":990,"line_end":990,"column_start":39,"column_end":74,"is_primary":true,"text":[{"text":"                        (*ptr.offset((lo + hi >> 1 as std::os::raw::c_int) as isize))","highlight_start":39,"highlight_end":74}],"label":null,"suggested_replacement":"(lo + hi) >> 1 as std::os::raw::c_int","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:990:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m990\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        (*ptr.offset((lo + hi >> 1 as std::os::raw::c_int) as isize))\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(lo + hi) >> 1 as std::os::raw::c_int`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":65266,"byte_end":65309,"line_start":1531,"line_end":1531,"column_start":22,"column_end":65,"is_primary":true,"text":[{"text":"                if !(bbSize - 1 as std::os::raw::c_int >> shifts <= 65535 as std::os::raw::c_int) {","highlight_start":22,"highlight_end":65}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":65266,"byte_end":65309,"line_start":1531,"line_end":1531,"column_start":22,"column_end":65,"is_primary":true,"text":[{"text":"                if !(bbSize - 1 as std::os::raw::c_int >> shifts <= 65535 as std::os::raw::c_int) {","highlight_start":22,"highlight_end":65}],"label":null,"suggested_replacement":"(bbSize - 1 as std::os::raw::c_int) >> shifts","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:1531:22\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1531\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if !(bbSize - 1 as std::os::raw::c_int >> shifts <= 65535 as std::os::raw::c_int) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(bbSize - 1 as std::os::raw::c_int) >> shifts`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":18695,"byte_end":31738,"line_start":563,"line_end":785,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if !(ferror(stream) != 0) {","highlight_start":9,"highlight_end":36},{"text":"            if !(ferror(zStream) != 0) {","highlight_start":1,"highlight_end":41},{"text":"                bzf = BZ2_bzWriteOpen(&mut bzerr, zStream, blockSize100k, verbosity, workFactor);","highlight_start":1,"highlight_end":98},{"text":"                if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":55},{"text":"                    current_block = 660242869387099075;","highlight_start":1,"highlight_end":56},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    if verbosity >= 2 as std::os::raw::c_int {","highlight_start":1,"highlight_end":63},{"text":"                        fprintf(","highlight_start":1,"highlight_end":33},{"text":"                            __stderrp,","highlight_start":1,"highlight_end":39},{"text":"                            b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":83},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    loop {","highlight_start":1,"highlight_end":27},{"text":"                        if !(1 as std::os::raw::c_int as Bool != 0) {","highlight_start":1,"highlight_end":70},{"text":"                            current_block = 13242334135786603907;","highlight_start":1,"highlight_end":66},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        if myfeof(stream) != 0 {","highlight_start":1,"highlight_end":49},{"text":"                            current_block = 13242334135786603907;","highlight_start":1,"highlight_end":66},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        nIbuf = fread(","highlight_start":1,"highlight_end":39},{"text":"                            ibuf.as_mut_ptr() as *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":76},{"text":"                            ::std::mem::size_of::<UChar>() as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":85},{"text":"                            5000 as std::os::raw::c_int as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":82},{"text":"                            stream,","highlight_start":1,"highlight_end":36},{"text":"                        ) as Int32;","highlight_start":1,"highlight_end":36},{"text":"                        if ferror(stream) != 0 {","highlight_start":1,"highlight_end":49},{"text":"                            current_block = 18225113528933273530;","highlight_start":1,"highlight_end":66},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        if nIbuf > 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":62},{"text":"                            BZ2_bzWrite(","highlight_start":1,"highlight_end":41},{"text":"                                &mut bzerr,","highlight_start":1,"highlight_end":44},{"text":"                                bzf,","highlight_start":1,"highlight_end":37},{"text":"                                ibuf.as_mut_ptr() as *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":80},{"text":"                                nIbuf,","highlight_start":1,"highlight_end":39},{"text":"                            );","highlight_start":1,"highlight_end":31},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":63},{"text":"                            current_block = 660242869387099075;","highlight_start":1,"highlight_end":64},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    match current_block {","highlight_start":1,"highlight_end":42},{"text":"                        18225113528933273530 => {}","highlight_start":1,"highlight_end":51},{"text":"                        660242869387099075 => {}","highlight_start":1,"highlight_end":49},{"text":"                        _ => {","highlight_start":1,"highlight_end":31},{"text":"                            BZ2_bzWriteClose64(","highlight_start":1,"highlight_end":48},{"text":"                                &mut bzerr,","highlight_start":1,"highlight_end":44},{"text":"                                bzf,","highlight_start":1,"highlight_end":37},{"text":"                                0 as std::os::raw::c_int,","highlight_start":1,"highlight_end":58},{"text":"                                &mut nbytes_in_lo32,","highlight_start":1,"highlight_end":53},{"text":"                                &mut nbytes_in_hi32,","highlight_start":1,"highlight_end":53},{"text":"                                &mut nbytes_out_lo32,","highlight_start":1,"highlight_end":54},{"text":"                                &mut nbytes_out_hi32,","highlight_start":1,"highlight_end":54},{"text":"                            );","highlight_start":1,"highlight_end":31},{"text":"                            if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":67},{"text":"                                current_block = 660242869387099075;","highlight_start":1,"highlight_end":68},{"text":"                            } else if ferror(zStream) != 0 {","highlight_start":1,"highlight_end":61},{"text":"                                current_block = 18225113528933273530;","highlight_start":1,"highlight_end":70},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                ret = fflush(zStream);","highlight_start":1,"highlight_end":55},{"text":"                                if ret == -(1 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":72},{"text":"                                    current_block = 18225113528933273530;","highlight_start":1,"highlight_end":74},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    if zStream != __stdoutp {","highlight_start":1,"highlight_end":62},{"text":"                                        let mut fd: Int32 = fileno(zStream);","highlight_start":1,"highlight_end":77},{"text":"                                        if fd < 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":75},{"text":"                                            current_block = 18225113528933273530;","highlight_start":1,"highlight_end":82},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            applySavedFileAttrToOutputFile(fd);","highlight_start":1,"highlight_end":80},{"text":"                                            ret = fclose(zStream);","highlight_start":1,"highlight_end":67},{"text":"                                            outputHandleJustInCase = 0 as *mut FILE;","highlight_start":1,"highlight_end":85},{"text":"                                            if ret == -(1 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":84},{"text":"                                                current_block = 18225113528933273530;","highlight_start":1,"highlight_end":86},{"text":"                                            } else {","highlight_start":1,"highlight_end":53},{"text":"                                                current_block = 17281240262373992796;","highlight_start":1,"highlight_end":86},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    } else {","highlight_start":1,"highlight_end":45},{"text":"                                        current_block = 17281240262373992796;","highlight_start":1,"highlight_end":78},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    match current_block {","highlight_start":1,"highlight_end":58},{"text":"                                        18225113528933273530 => {}","highlight_start":1,"highlight_end":67},{"text":"                                        _ => {","highlight_start":1,"highlight_end":47},{"text":"                                            outputHandleJustInCase = 0 as *mut FILE;","highlight_start":1,"highlight_end":85},{"text":"                                            if ferror(stream) != 0 {","highlight_start":1,"highlight_end":69},{"text":"                                                current_block = 18225113528933273530;","highlight_start":1,"highlight_end":86},{"text":"                                            } else {","highlight_start":1,"highlight_end":53},{"text":"                                                ret = fclose(stream);","highlight_start":1,"highlight_end":70},{"text":"                                                if ret == -(1 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":88},{"text":"                                                    current_block = 18225113528933273530;","highlight_start":1,"highlight_end":90},{"text":"                                                } else {","highlight_start":1,"highlight_end":57},{"text":"                                                    if verbosity >= 1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":95},{"text":"                                                        if nbytes_in_lo32","highlight_start":1,"highlight_end":74},{"text":"                                                            == 0 as std::os::raw::c_int","highlight_start":1,"highlight_end":88},{"text":"                                                                as std::os::raw::c_uint","highlight_start":1,"highlight_end":88},{"text":"                                                            && nbytes_in_hi32","highlight_start":1,"highlight_end":78},{"text":"                                                                == 0 as std::os::raw::c_int","highlight_start":1,"highlight_end":92},{"text":"                                                                    as std::os::raw::c_uint","highlight_start":1,"highlight_end":92},{"text":"                                                        {","highlight_start":1,"highlight_end":58},{"text":"                                                            fprintf(","highlight_start":1,"highlight_end":69},{"text":"                                                                __stderrp,","highlight_start":1,"highlight_end":75},{"text":"                                                                b\" no data compressed.\\n\\x00\"","highlight_start":1,"highlight_end":94},{"text":"                                                                    as *const u8","highlight_start":1,"highlight_end":81},{"text":"                                                                    as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":100},{"text":"                                                            );","highlight_start":1,"highlight_end":63},{"text":"                                                        } else {","highlight_start":1,"highlight_end":65},{"text":"                                                            let mut buf_nin: [Char; 32] = [0; 32];","highlight_start":1,"highlight_end":99},{"text":"                                                            let mut buf_nout: [Char; 32] = [0; 32];","highlight_start":1,"highlight_end":100},{"text":"                                                            let mut nbytes_in: UInt64 =","highlight_start":1,"highlight_end":88},{"text":"                                                                UInt64 { b: [0; 8] };","highlight_start":1,"highlight_end":86},{"text":"                                                            let mut nbytes_out: UInt64 =","highlight_start":1,"highlight_end":89},{"text":"                                                                UInt64 { b: [0; 8] };","highlight_start":1,"highlight_end":86},{"text":"                                                            let mut nbytes_in_d : std :: os :: raw :: c_double = 0.;","highlight_start":1,"highlight_end":117},{"text":"                                                            let mut nbytes_out_d : std :: os :: raw :: c_double = 0.;","highlight_start":1,"highlight_end":118},{"text":"                                                            uInt64_from_UInt32s(","highlight_start":1,"highlight_end":81},{"text":"                                                                &mut nbytes_in,","highlight_start":1,"highlight_end":80},{"text":"                                                                nbytes_in_lo32,","highlight_start":1,"highlight_end":80},{"text":"                                                                nbytes_in_hi32,","highlight_start":1,"highlight_end":80},{"text":"                                                            );","highlight_start":1,"highlight_end":63},{"text":"                                                            uInt64_from_UInt32s(","highlight_start":1,"highlight_end":81},{"text":"                                                                &mut nbytes_out,","highlight_start":1,"highlight_end":81},{"text":"                                                                nbytes_out_lo32,","highlight_start":1,"highlight_end":81},{"text":"                                                                nbytes_out_hi32,","highlight_start":1,"highlight_end":81},{"text":"                                                            );","highlight_start":1,"highlight_end":63},{"text":"                                                            nbytes_in_d =","highlight_start":1,"highlight_end":74},{"text":"                                                                uInt64_to_double(&mut nbytes_in);","highlight_start":1,"highlight_end":98},{"text":"                                                            nbytes_out_d =","highlight_start":1,"highlight_end":75},{"text":"                                                                uInt64_to_double(&mut nbytes_out);","highlight_start":1,"highlight_end":99},{"text":"                                                            uInt64_toAscii(","highlight_start":1,"highlight_end":76},{"text":"                                                                buf_nin.as_mut_ptr(),","highlight_start":1,"highlight_end":86},{"text":"                                                                &mut nbytes_in,","highlight_start":1,"highlight_end":80},{"text":"                                                            );","highlight_start":1,"highlight_end":63},{"text":"                                                            uInt64_toAscii(","highlight_start":1,"highlight_end":76},{"text":"                                                                buf_nout.as_mut_ptr(),","highlight_start":1,"highlight_end":87},{"text":"                                                                &mut nbytes_out,","highlight_start":1,"highlight_end":81},{"text":"                                                            );","highlight_start":1,"highlight_end":63},{"text":"                                                            fprintf (__stderrp, b\"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, nbytes_in_d / nbytes_out_d, 8.0f64 * nbytes_out_d /","highlight_start":1,"highlight_end":250},{"text":"                                                              nbytes_in_d, 100.0f64 * (1.0f64 - nbytes_out_d / nbytes_in_d), buf_nin.as_mut_ptr (), buf_nout.as_mut_ptr ());","highlight_start":1,"highlight_end":173},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    return;","highlight_start":1,"highlight_end":60},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                match current_block {","highlight_start":1,"highlight_end":38},{"text":"                    18225113528933273530 => {}","highlight_start":1,"highlight_end":47},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        BZ2_bzWriteClose64(","highlight_start":1,"highlight_end":44},{"text":"                            &mut bzerr_dummy,","highlight_start":1,"highlight_end":46},{"text":"                            bzf,","highlight_start":1,"highlight_end":33},{"text":"                            1 as std::os::raw::c_int,","highlight_start":1,"highlight_end":54},{"text":"                            &mut nbytes_in_lo32,","highlight_start":1,"highlight_end":49},{"text":"                            &mut nbytes_in_hi32,","highlight_start":1,"highlight_end":49},{"text":"                            &mut nbytes_out_lo32,","highlight_start":1,"highlight_end":50},{"text":"                            &mut nbytes_out_hi32,","highlight_start":1,"highlight_end":50},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                        match bzerr {","highlight_start":1,"highlight_end":38},{"text":"                            -9 => {","highlight_start":1,"highlight_end":36},{"text":"                                current_block = 5122324059762049690;","highlight_start":1,"highlight_end":69},{"text":"                                match current_block {","highlight_start":1,"highlight_end":54},{"text":"                                    4323399205346619401 => {","highlight_start":1,"highlight_end":61},{"text":"                                        panic(","highlight_start":1,"highlight_end":47},{"text":"                                            b\"compress:unexpected error\\x00\" as *const u8","highlight_start":1,"highlight_end":90},{"text":"                                                as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":80},{"text":"                                        );","highlight_start":1,"highlight_end":43},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    2380987886157893679 => {","highlight_start":1,"highlight_end":61},{"text":"                                        outOfMemory();","highlight_start":1,"highlight_end":55},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    _ => {","highlight_start":1,"highlight_end":43},{"text":"                                        configError();","highlight_start":1,"highlight_end":55},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            -3 => {","highlight_start":1,"highlight_end":36},{"text":"                                current_block = 2380987886157893679;","highlight_start":1,"highlight_end":69},{"text":"                                match current_block {","highlight_start":1,"highlight_end":54},{"text":"                                    4323399205346619401 => {","highlight_start":1,"highlight_end":61},{"text":"                                        panic(","highlight_start":1,"highlight_end":47},{"text":"                                            b\"compress:unexpected error\\x00\" as *const u8","highlight_start":1,"highlight_end":90},{"text":"                                                as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":80},{"text":"                                        );","highlight_start":1,"highlight_end":43},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    2380987886157893679 => {","highlight_start":1,"highlight_end":61},{"text":"                                        outOfMemory();","highlight_start":1,"highlight_end":55},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    _ => {","highlight_start":1,"highlight_end":43},{"text":"                                        configError();","highlight_start":1,"highlight_end":55},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            -6 => {}","highlight_start":1,"highlight_end":37},{"text":"                            _ => {","highlight_start":1,"highlight_end":35},{"text":"                                current_block = 4323399205346619401;","highlight_start":1,"highlight_end":69},{"text":"                                match current_block {","highlight_start":1,"highlight_end":54},{"text":"                                    4323399205346619401 => {","highlight_start":1,"highlight_end":61},{"text":"                                        panic(","highlight_start":1,"highlight_end":47},{"text":"                                            b\"compress:unexpected error\\x00\" as *const u8","highlight_start":1,"highlight_end":90},{"text":"                                                as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":80},{"text":"                                        );","highlight_start":1,"highlight_end":43},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    2380987886157893679 => {","highlight_start":1,"highlight_end":61},{"text":"                                        outOfMemory();","highlight_start":1,"highlight_end":55},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    _ => {","highlight_start":1,"highlight_end":43},{"text":"                                        configError();","highlight_start":1,"highlight_end":55},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::collapsible_if)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":18695,"byte_end":31738,"line_start":563,"line_end":785,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if !(ferror(stream) != 0) {","highlight_start":9,"highlight_end":36},{"text":"            if !(ferror(zStream) != 0) {","highlight_start":1,"highlight_end":41},{"text":"                bzf = BZ2_bzWriteOpen(&mut bzerr, zStream, blockSize100k, verbosity, workFactor);","highlight_start":1,"highlight_end":98},{"text":"                if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":55},{"text":"                    current_block = 660242869387099075;","highlight_start":1,"highlight_end":56},{"text":"                } else {","highlight_start":1,"highlight_end":25},{"text":"                    if verbosity >= 2 as std::os::raw::c_int {","highlight_start":1,"highlight_end":63},{"text":"                        fprintf(","highlight_start":1,"highlight_end":33},{"text":"                            __stderrp,","highlight_start":1,"highlight_end":39},{"text":"                            b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":83},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    loop {","highlight_start":1,"highlight_end":27},{"text":"                        if !(1 as std::os::raw::c_int as Bool != 0) {","highlight_start":1,"highlight_end":70},{"text":"                            current_block = 13242334135786603907;","highlight_start":1,"highlight_end":66},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        if myfeof(stream) != 0 {","highlight_start":1,"highlight_end":49},{"text":"                            current_block = 13242334135786603907;","highlight_start":1,"highlight_end":66},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        nIbuf = fread(","highlight_start":1,"highlight_end":39},{"text":"                            ibuf.as_mut_ptr() as *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":76},{"text":"                            ::std::mem::size_of::<UChar>() as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":85},{"text":"                            5000 as std::os::raw::c_int as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":82},{"text":"                            stream,","highlight_start":1,"highlight_end":36},{"text":"                        ) as Int32;","highlight_start":1,"highlight_end":36},{"text":"                        if ferror(stream) != 0 {","highlight_start":1,"highlight_end":49},{"text":"                            current_block = 18225113528933273530;","highlight_start":1,"highlight_end":66},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        if nIbuf > 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":62},{"text":"                            BZ2_bzWrite(","highlight_start":1,"highlight_end":41},{"text":"                                &mut bzerr,","highlight_start":1,"highlight_end":44},{"text":"                                bzf,","highlight_start":1,"highlight_end":37},{"text":"                                ibuf.as_mut_ptr() as *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":80},{"text":"                                nIbuf,","highlight_start":1,"highlight_end":39},{"text":"                            );","highlight_start":1,"highlight_end":31},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":63},{"text":"                            current_block = 660242869387099075;","highlight_start":1,"highlight_end":64},{"text":"                            break;","highlight_start":1,"highlight_end":35},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    match current_block {","highlight_start":1,"highlight_end":42},{"text":"                        18225113528933273530 => {}","highlight_start":1,"highlight_end":51},{"text":"                        660242869387099075 => {}","highlight_start":1,"highlight_end":49},{"text":"                        _ => {","highlight_start":1,"highlight_end":31},{"text":"                            BZ2_bzWriteClose64(","highlight_start":1,"highlight_end":48},{"text":"                                &mut bzerr,","highlight_start":1,"highlight_end":44},{"text":"                                bzf,","highlight_start":1,"highlight_end":37},{"text":"                                0 as std::os::raw::c_int,","highlight_start":1,"highlight_end":58},{"text":"                                &mut nbytes_in_lo32,","highlight_start":1,"highlight_end":53},{"text":"                                &mut nbytes_in_hi32,","highlight_start":1,"highlight_end":53},{"text":"                                &mut nbytes_out_lo32,","highlight_start":1,"highlight_end":54},{"text":"                                &mut nbytes_out_hi32,","highlight_start":1,"highlight_end":54},{"text":"                            );","highlight_start":1,"highlight_end":31},{"text":"                            if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":67},{"text":"                                current_block = 660242869387099075;","highlight_start":1,"highlight_end":68},{"text":"                            } else if ferror(zStream) != 0 {","highlight_start":1,"highlight_end":61},{"text":"                                current_block = 18225113528933273530;","highlight_start":1,"highlight_end":70},{"text":"                            } else {","highlight_start":1,"highlight_end":37},{"text":"                                ret = fflush(zStream);","highlight_start":1,"highlight_end":55},{"text":"                                if ret == -(1 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":72},{"text":"                                    current_block = 18225113528933273530;","highlight_start":1,"highlight_end":74},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    if zStream != __stdoutp {","highlight_start":1,"highlight_end":62},{"text":"                                        let mut fd: Int32 = fileno(zStream);","highlight_start":1,"highlight_end":77},{"text":"                                        if fd < 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":75},{"text":"                                            current_block = 18225113528933273530;","highlight_start":1,"highlight_end":82},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            applySavedFileAttrToOutputFile(fd);","highlight_start":1,"highlight_end":80},{"text":"                                            ret = fclose(zStream);","highlight_start":1,"highlight_end":67},{"text":"                                            outputHandleJustInCase = 0 as *mut FILE;","highlight_start":1,"highlight_end":85},{"text":"                                            if ret == -(1 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":84},{"text":"                                                current_block = 18225113528933273530;","highlight_start":1,"highlight_end":86},{"text":"                                            } else {","highlight_start":1,"highlight_end":53},{"text":"                                                current_block = 17281240262373992796;","highlight_start":1,"highlight_end":86},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    } else {","highlight_start":1,"highlight_end":45},{"text":"                                        current_block = 17281240262373992796;","highlight_start":1,"highlight_end":78},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    match current_block {","highlight_start":1,"highlight_end":58},{"text":"                                        18225113528933273530 => {}","highlight_start":1,"highlight_end":67},{"text":"                                        _ => {","highlight_start":1,"highlight_end":47},{"text":"                                            outputHandleJustInCase = 0 as *mut FILE;","highlight_start":1,"highlight_end":85},{"text":"                                            if ferror(stream) != 0 {","highlight_start":1,"highlight_end":69},{"text":"                                                current_block = 18225113528933273530;","highlight_start":1,"highlight_end":86},{"text":"                                            } else {","highlight_start":1,"highlight_end":53},{"text":"                                                ret = fclose(stream);","highlight_start":1,"highlight_end":70},{"text":"                                                if ret == -(1 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":88},{"text":"                                                    current_block = 18225113528933273530;","highlight_start":1,"highlight_end":90},{"text":"                                                } else {","highlight_start":1,"highlight_end":57},{"text":"                                                    if verbosity >= 1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":95},{"text":"                                                        if nbytes_in_lo32","highlight_start":1,"highlight_end":74},{"text":"                                                            == 0 as std::os::raw::c_int","highlight_start":1,"highlight_end":88},{"text":"                                                                as std::os::raw::c_uint","highlight_start":1,"highlight_end":88},{"text":"                                                            && nbytes_in_hi32","highlight_start":1,"highlight_end":78},{"text":"                                                                == 0 as std::os::raw::c_int","highlight_start":1,"highlight_end":92},{"text":"                                                                    as std::os::raw::c_uint","highlight_start":1,"highlight_end":92},{"text":"                                                        {","highlight_start":1,"highlight_end":58},{"text":"                                                            fprintf(","highlight_start":1,"highlight_end":69},{"text":"                                                                __stderrp,","highlight_start":1,"highlight_end":75},{"text":"                                                                b\" no data compressed.\\n\\x00\"","highlight_start":1,"highlight_end":94},{"text":"                                                                    as *const u8","highlight_start":1,"highlight_end":81},{"text":"                                                                    as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":100},{"text":"                                                            );","highlight_start":1,"highlight_end":63},{"text":"                                                        } else {","highlight_start":1,"highlight_end":65},{"text":"                                                            let mut buf_nin: [Char; 32] = [0; 32];","highlight_start":1,"highlight_end":99},{"text":"                                                            let mut buf_nout: [Char; 32] = [0; 32];","highlight_start":1,"highlight_end":100},{"text":"                                                            let mut nbytes_in: UInt64 =","highlight_start":1,"highlight_end":88},{"text":"                                                                UInt64 { b: [0; 8] };","highlight_start":1,"highlight_end":86},{"text":"                                                            let mut nbytes_out: UInt64 =","highlight_start":1,"highlight_end":89},{"text":"                                                                UInt64 { b: [0; 8] };","highlight_start":1,"highlight_end":86},{"text":"                                                            let mut nbytes_in_d : std :: os :: raw :: c_double = 0.;","highlight_start":1,"highlight_end":117},{"text":"                                                            let mut nbytes_out_d : std :: os :: raw :: c_double = 0.;","highlight_start":1,"highlight_end":118},{"text":"                                                            uInt64_from_UInt32s(","highlight_start":1,"highlight_end":81},{"text":"                                                                &mut nbytes_in,","highlight_start":1,"highlight_end":80},{"text":"                                                                nbytes_in_lo32,","highlight_start":1,"highlight_end":80},{"text":"                                                                nbytes_in_hi32,","highlight_start":1,"highlight_end":80},{"text":"                                                            );","highlight_start":1,"highlight_end":63},{"text":"                                                            uInt64_from_UInt32s(","highlight_start":1,"highlight_end":81},{"text":"                                                                &mut nbytes_out,","highlight_start":1,"highlight_end":81},{"text":"                                                                nbytes_out_lo32,","highlight_start":1,"highlight_end":81},{"text":"                                                                nbytes_out_hi32,","highlight_start":1,"highlight_end":81},{"text":"                                                            );","highlight_start":1,"highlight_end":63},{"text":"                                                            nbytes_in_d =","highlight_start":1,"highlight_end":74},{"text":"                                                                uInt64_to_double(&mut nbytes_in);","highlight_start":1,"highlight_end":98},{"text":"                                                            nbytes_out_d =","highlight_start":1,"highlight_end":75},{"text":"                                                                uInt64_to_double(&mut nbytes_out);","highlight_start":1,"highlight_end":99},{"text":"                                                            uInt64_toAscii(","highlight_start":1,"highlight_end":76},{"text":"                                                                buf_nin.as_mut_ptr(),","highlight_start":1,"highlight_end":86},{"text":"                                                                &mut nbytes_in,","highlight_start":1,"highlight_end":80},{"text":"                                                            );","highlight_start":1,"highlight_end":63},{"text":"                                                            uInt64_toAscii(","highlight_start":1,"highlight_end":76},{"text":"                                                                buf_nout.as_mut_ptr(),","highlight_start":1,"highlight_end":87},{"text":"                                                                &mut nbytes_out,","highlight_start":1,"highlight_end":81},{"text":"                                                            );","highlight_start":1,"highlight_end":63},{"text":"                                                            fprintf (__stderrp, b\"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, nbytes_in_d / nbytes_out_d, 8.0f64 * nbytes_out_d /","highlight_start":1,"highlight_end":250},{"text":"                                                              nbytes_in_d, 100.0f64 * (1.0f64 - nbytes_out_d / nbytes_in_d), buf_nin.as_mut_ptr (), buf_nout.as_mut_ptr ());","highlight_start":1,"highlight_end":173},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    return;","highlight_start":1,"highlight_end":60},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                match current_block {","highlight_start":1,"highlight_end":38},{"text":"                    18225113528933273530 => {}","highlight_start":1,"highlight_end":47},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        BZ2_bzWriteClose64(","highlight_start":1,"highlight_end":44},{"text":"                            &mut bzerr_dummy,","highlight_start":1,"highlight_end":46},{"text":"                            bzf,","highlight_start":1,"highlight_end":33},{"text":"                            1 as std::os::raw::c_int,","highlight_start":1,"highlight_end":54},{"text":"                            &mut nbytes_in_lo32,","highlight_start":1,"highlight_end":49},{"text":"                            &mut nbytes_in_hi32,","highlight_start":1,"highlight_end":49},{"text":"                            &mut nbytes_out_lo32,","highlight_start":1,"highlight_end":50},{"text":"                            &mut nbytes_out_hi32,","highlight_start":1,"highlight_end":50},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                        match bzerr {","highlight_start":1,"highlight_end":38},{"text":"                            -9 => {","highlight_start":1,"highlight_end":36},{"text":"                                current_block = 5122324059762049690;","highlight_start":1,"highlight_end":69},{"text":"                                match current_block {","highlight_start":1,"highlight_end":54},{"text":"                                    4323399205346619401 => {","highlight_start":1,"highlight_end":61},{"text":"                                        panic(","highlight_start":1,"highlight_end":47},{"text":"                                            b\"compress:unexpected error\\x00\" as *const u8","highlight_start":1,"highlight_end":90},{"text":"                                                as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":80},{"text":"                                        );","highlight_start":1,"highlight_end":43},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    2380987886157893679 => {","highlight_start":1,"highlight_end":61},{"text":"                                        outOfMemory();","highlight_start":1,"highlight_end":55},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    _ => {","highlight_start":1,"highlight_end":43},{"text":"                                        configError();","highlight_start":1,"highlight_end":55},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            -3 => {","highlight_start":1,"highlight_end":36},{"text":"                                current_block = 2380987886157893679;","highlight_start":1,"highlight_end":69},{"text":"                                match current_block {","highlight_start":1,"highlight_end":54},{"text":"                                    4323399205346619401 => {","highlight_start":1,"highlight_end":61},{"text":"                                        panic(","highlight_start":1,"highlight_end":47},{"text":"                                            b\"compress:unexpected error\\x00\" as *const u8","highlight_start":1,"highlight_end":90},{"text":"                                                as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":80},{"text":"                                        );","highlight_start":1,"highlight_end":43},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    2380987886157893679 => {","highlight_start":1,"highlight_end":61},{"text":"                                        outOfMemory();","highlight_start":1,"highlight_end":55},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    _ => {","highlight_start":1,"highlight_end":43},{"text":"                                        configError();","highlight_start":1,"highlight_end":55},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            -6 => {}","highlight_start":1,"highlight_end":37},{"text":"                            _ => {","highlight_start":1,"highlight_end":35},{"text":"                                current_block = 4323399205346619401;","highlight_start":1,"highlight_end":69},{"text":"                                match current_block {","highlight_start":1,"highlight_end":54},{"text":"                                    4323399205346619401 => {","highlight_start":1,"highlight_end":61},{"text":"                                        panic(","highlight_start":1,"highlight_end":47},{"text":"                                            b\"compress:unexpected error\\x00\" as *const u8","highlight_start":1,"highlight_end":90},{"text":"                                                as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":80},{"text":"                                        );","highlight_start":1,"highlight_end":43},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    2380987886157893679 => {","highlight_start":1,"highlight_end":61},{"text":"                                        outOfMemory();","highlight_start":1,"highlight_end":55},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                    _ => {","highlight_start":1,"highlight_end":43},{"text":"                                        configError();","highlight_start":1,"highlight_end":55},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"if !(ferror(stream) != 0) && !(ferror(zStream) != 0) {\n            bzf = BZ2_bzWriteOpen(&mut bzerr, zStream, blockSize100k, verbosity, workFactor);\n            if bzerr != 0 as std::os::raw::c_int {\n                current_block = 660242869387099075;\n            } else {\n                if verbosity >= 2 as std::os::raw::c_int {\n                    fprintf(\n                        __stderrp,\n                        b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n                    );\n                }\n                loop {\n                    if !(1 as std::os::raw::c_int as Bool != 0) {\n                        current_block = 13242334135786603907;\n                        break;\n                    }\n                    if myfeof(stream) != 0 {\n                        current_block = 13242334135786603907;\n                        break;\n                    }\n                    nIbuf = fread(\n                        ibuf.as_mut_ptr() as *mut std::os::raw::c_void,\n                        ::std::mem::size_of::<UChar>() as std::os::raw::c_ulong,\n                        5000 as std::os::raw::c_int as std::os::raw::c_ulong,\n                        stream,\n                    ) as Int32;\n                    if ferror(stream) != 0 {\n                        current_block = 18225113528933273530;\n                        break;\n                    }\n                    if nIbuf > 0 as std::os::raw::c_int {\n                        BZ2_bzWrite(\n                            &mut bzerr,\n                            bzf,\n                            ibuf.as_mut_ptr() as *mut std::os::raw::c_void,\n                            nIbuf,\n                        );\n                    }\n                    if bzerr != 0 as std::os::raw::c_int {\n                        current_block = 660242869387099075;\n                        break;\n                    }\n                }\n                match current_block {\n                    18225113528933273530 => {}\n                    660242869387099075 => {}\n                    _ => {\n                        BZ2_bzWriteClose64(\n                            &mut bzerr,\n                            bzf,\n                            0 as std::os::raw::c_int,\n                            &mut nbytes_in_lo32,\n                            &mut nbytes_in_hi32,\n                            &mut nbytes_out_lo32,\n                            &mut nbytes_out_hi32,\n                        );\n                        if bzerr != 0 as std::os::raw::c_int {\n                            current_block = 660242869387099075;\n                        } else if ferror(zStream) != 0 {\n                            current_block = 18225113528933273530;\n                        } else {\n                            ret = fflush(zStream);\n                            if ret == -(1 as std::os::raw::c_int) {\n                                current_block = 18225113528933273530;\n                            } else {\n                                if zStream != __stdoutp {\n                                    let mut fd: Int32 = fileno(zStream);\n                                    if fd < 0 as std::os::raw::c_int {\n                                        current_block = 18225113528933273530;\n                                    } else {\n                                        applySavedFileAttrToOutputFile(fd);\n                                        ret = fclose(zStream);\n                                        outputHandleJustInCase = 0 as *mut FILE;\n                                        if ret == -(1 as std::os::raw::c_int) {\n                                            current_block = 18225113528933273530;\n                                        } else {\n                                            current_block = 17281240262373992796;\n                                        }\n                                    }\n                                } else {\n                                    current_block = 17281240262373992796;\n                                }\n                                match current_block {\n                                    18225113528933273530 => {}\n                                    _ => {\n                                        outputHandleJustInCase = 0 as *mut FILE;\n                                        if ferror(stream) != 0 {\n                                            current_block = 18225113528933273530;\n                                        } else {\n                                            ret = fclose(stream);\n                                            if ret == -(1 as std::os::raw::c_int) {\n                                                current_block = 18225113528933273530;\n                                            } else {\n                                                if verbosity >= 1 as std::os::raw::c_int {\n                                                    if nbytes_in_lo32\n                                                        == 0 as std::os::raw::c_int\n                                                            as std::os::raw::c_uint\n                                                        && nbytes_in_hi32\n                                                            == 0 as std::os::raw::c_int\n                                                                as std::os::raw::c_uint\n                                                    {\n                                                        fprintf(\n                                                            __stderrp,\n                                                            b\" no data compressed.\\n\\x00\"\n                                                                as *const u8\n                                                                as *const std::os::raw::c_char,\n                                                        );\n                                                    } else {\n                                                        let mut buf_nin: [Char; 32] = [0; 32];\n                                                        let mut buf_nout: [Char; 32] = [0; 32];\n                                                        let mut nbytes_in: UInt64 =\n                                                            UInt64 { b: [0; 8] };\n                                                        let mut nbytes_out: UInt64 =\n                                                            UInt64 { b: [0; 8] };\n                                                        let mut nbytes_in_d : std :: os :: raw :: c_double = 0.;\n                                                        let mut nbytes_out_d : std :: os :: raw :: c_double = 0.;\n                                                        uInt64_from_UInt32s(\n                                                            &mut nbytes_in,\n                                                            nbytes_in_lo32,\n                                                            nbytes_in_hi32,\n                                                        );\n                                                        uInt64_from_UInt32s(\n                                                            &mut nbytes_out,\n                                                            nbytes_out_lo32,\n                                                            nbytes_out_hi32,\n                                                        );\n                                                        nbytes_in_d =\n                                                            uInt64_to_double(&mut nbytes_in);\n                                                        nbytes_out_d =\n                                                            uInt64_to_double(&mut nbytes_out);\n                                                        uInt64_toAscii(\n                                                            buf_nin.as_mut_ptr(),\n                                                            &mut nbytes_in,\n                                                        );\n                                                        uInt64_toAscii(\n                                                            buf_nout.as_mut_ptr(),\n                                                            &mut nbytes_out,\n                                                        );\n                                                        fprintf (__stderrp, b\"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, nbytes_in_d / nbytes_out_d, 8.0f64 * nbytes_out_d /\n                                                          nbytes_in_d, 100.0f64 * (1.0f64 - nbytes_out_d / nbytes_in_d), buf_nin.as_mut_ptr (), buf_nout.as_mut_ptr ());\n                                                    }\n                                                }\n                                                return;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            match current_block {\n                18225113528933273530 => {}\n                _ => {\n                    BZ2_bzWriteClose64(\n                        &mut bzerr_dummy,\n                        bzf,\n                        1 as std::os::raw::c_int,\n                        &mut nbytes_in_lo32,\n                        &mut nbytes_in_hi32,\n                        &mut nbytes_out_lo32,\n                        &mut nbytes_out_hi32,\n                    );\n                    match bzerr {\n                        -9 => {\n                            current_block = 5122324059762049690;\n                            match current_block {\n                                4323399205346619401 => {\n                                    panic(\n                                        b\"compress:unexpected error\\x00\" as *const u8\n                                            as *const std::os::raw::c_char,\n                                    );\n                                }\n                                2380987886157893679 => {\n                                    outOfMemory();\n                                }\n                                _ => {\n                                    configError();\n                                }\n                            }\n                        }\n                        -3 => {\n                            current_block = 2380987886157893679;\n                            match current_block {\n                                4323399205346619401 => {\n                                    panic(\n                                        b\"compress:unexpected error\\x00\" as *const u8\n                                            as *const std::os::raw::c_char,\n                                    );\n                                }\n                                2380987886157893679 => {\n                                    outOfMemory();\n                                }\n                                _ => {\n                                    configError();\n                                }\n                            }\n                        }\n                        -6 => {}\n                        _ => {\n                            current_block = 4323399205346619401;\n                            match current_block {\n                                4323399205346619401 => {\n                                    panic(\n                                        b\"compress:unexpected error\\x00\" as *const u8\n                                            as *const std::os::raw::c_char,\n                                    );\n                                }\n                                2380987886157893679 => {\n                                    outOfMemory();\n                                }\n                                _ => {\n                                    configError();\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:563:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m563\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if !(ferror(stream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m564\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if !(ferror(zStream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m565\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                bzf = BZ2_bzWriteOpen(&mut bzerr, zStream, blockSize100k, verbosity, workFactor);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m566\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if bzerr != 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m784\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m785\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::collapsible_if)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m563\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mif !(ferror(stream) != 0) && !(ferror(zStream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m564\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             bzf = BZ2_bzWriteOpen(&mut bzerr, zStream, blockSize100k, verbosity, workFactor);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m565\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             if bzerr != 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m566\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 current_block = 660242869387099075;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m568\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 if verbosity >= 2 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m569\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     fprintf(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m570\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         __stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m571\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         b\"\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m572\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m573\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 loop {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m575\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     if !(1 as std::os::raw::c_int as Bool != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m576\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         current_block = 13242334135786603907;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m577\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         break;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m578\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m579\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     if myfeof(stream) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m580\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         current_block = 13242334135786603907;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m581\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         break;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m582\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     nIbuf = fread(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m584\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         ibuf.as_mut_ptr() as *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         ::std::mem::size_of::<UChar>() as std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m586\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         5000 as std::os::raw::c_int as std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m587\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         stream,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m588\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     ) as Int32;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m589\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     if ferror(stream) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m590\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         current_block = 18225113528933273530;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m591\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         break;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m592\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m593\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     if nIbuf > 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m594\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         BZ2_bzWrite(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m595\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             &mut bzerr,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m596\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             bzf,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m597\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             ibuf.as_mut_ptr() as *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m598\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             nIbuf,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m599\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m600\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m601\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     if bzerr != 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m602\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         current_block = 660242869387099075;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m603\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         break;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m604\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m605\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m606\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m607\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     18225113528933273530 => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m608\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     660242869387099075 => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m609\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m610\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         BZ2_bzWriteClose64(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m611\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             &mut bzerr,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m612\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             bzf,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m613\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             0 as std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m614\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             &mut nbytes_in_lo32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m615\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             &mut nbytes_in_hi32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m616\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             &mut nbytes_out_lo32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m617\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             &mut nbytes_out_hi32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m619\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         if bzerr != 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m620\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             current_block = 660242869387099075;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m621\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         } else if ferror(zStream) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m622\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             current_block = 18225113528933273530;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m623\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m624\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             ret = fflush(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m625\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             if ret == -(1 as std::os::raw::c_int) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m626\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 current_block = 18225113528933273530;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m627\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m628\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 if zStream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m629\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     let mut fd: Int32 = fileno(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m630\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     if fd < 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m631\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block = 18225113528933273530;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m632\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m633\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         applySavedFileAttrToOutputFile(fd);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m634\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         ret = fclose(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m635\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         outputHandleJustInCase = 0 as *mut FILE;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m636\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         if ret == -(1 as std::os::raw::c_int) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m637\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             current_block = 18225113528933273530;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m638\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m639\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             current_block = 17281240262373992796;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m640\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m641\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m642\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m643\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     current_block = 17281240262373992796;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m644\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m645\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m646\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     18225113528933273530 => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m647\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m648\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         outputHandleJustInCase = 0 as *mut FILE;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m649\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         if ferror(stream) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m650\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             current_block = 18225113528933273530;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m651\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m652\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             ret = fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m653\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             if ret == -(1 as std::os::raw::c_int) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m654\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 current_block = 18225113528933273530;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m655\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m656\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if verbosity >= 1 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m657\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if nbytes_in_lo32\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m658\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         == 0 as std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m659\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             as std::os::raw::c_uint\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m660\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         && nbytes_in_hi32\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m661\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             == 0 as std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m662\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 as std::os::raw::c_uint\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m663\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m664\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         fprintf(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m665\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             __stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m666\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             b\" no data compressed.\\n\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m667\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 as *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m668\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m669\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m670\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m671\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         let mut buf_nin: [Char; 32] = [0; 32];\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m672\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         let mut buf_nout: [Char; 32] = [0; 32];\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m673\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         let mut nbytes_in: UInt64 =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m674\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             UInt64 { b: [0; 8] };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m675\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         let mut nbytes_out: UInt64 =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m676\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             UInt64 { b: [0; 8] };\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m677\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         let mut nbytes_in_d : std :: os :: raw :: c_double = 0.;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m678\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         let mut nbytes_out_d : std :: os :: raw :: c_double = 0.;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m679\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         uInt64_from_UInt32s(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m680\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             &mut nbytes_in,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m681\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             nbytes_in_lo32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m682\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             nbytes_in_hi32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m683\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m684\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         uInt64_from_UInt32s(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m685\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             &mut nbytes_out,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m686\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             nbytes_out_lo32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m687\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             nbytes_out_hi32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m688\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m689\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         nbytes_in_d =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m690\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             uInt64_to_double(&mut nbytes_in);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         nbytes_out_d =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m692\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             uInt64_to_double(&mut nbytes_out);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m693\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         uInt64_toAscii(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m694\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             buf_nin.as_mut_ptr(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m695\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             &mut nbytes_in,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m696\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m697\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         uInt64_toAscii(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m698\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             buf_nout.as_mut_ptr(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m699\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             &mut nbytes_out,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m700\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m701\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         fprintf (__stderrp, b\"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, nbytes_in_d / nbytes_out_d, 8.0f64 * nbytes_out_d /\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m702\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                           nbytes_in_d, 100.0f64 * (1.0f64 - nbytes_out_d / nbytes_in_d), buf_nin.as_mut_ptr (), buf_nout.as_mut_ptr ());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m703\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m704\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m705\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 return;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m706\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m707\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m708\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m709\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m710\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m711\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m712\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m713\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m714\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m715\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 18225113528933273530 => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m717\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m718\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     BZ2_bzWriteClose64(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m719\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         &mut bzerr_dummy,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         bzf,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m721\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         1 as std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         &mut nbytes_in_lo32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m723\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         &mut nbytes_in_hi32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m724\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         &mut nbytes_out_lo32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m725\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         &mut nbytes_out_hi32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m726\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m727\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     match bzerr {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m728\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         -9 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m729\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             current_block = 5122324059762049690;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m730\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m731\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 4323399205346619401 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m732\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     panic(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m733\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         b\"compress:unexpected error\\x00\" as *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m734\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m735\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m736\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m737\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 2380987886157893679 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m738\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     outOfMemory();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m739\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m740\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m741\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     configError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m742\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m743\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m744\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m745\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         -3 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m746\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             current_block = 2380987886157893679;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m747\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m748\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 4323399205346619401 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m749\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     panic(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m750\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         b\"compress:unexpected error\\x00\" as *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m751\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m752\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m753\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m754\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 2380987886157893679 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m755\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     outOfMemory();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m756\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m757\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m758\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     configError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m759\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m760\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m761\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m762\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         -6 => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m763\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m764\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             current_block = 4323399205346619401;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m765\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m766\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 4323399205346619401 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m767\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     panic(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m768\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         b\"compress:unexpected error\\x00\" as *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m769\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m770\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m771\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m772\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 2380987886157893679 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m773\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     outOfMemory();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m774\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m775\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m776\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     configError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m777\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m778\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m779\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m780\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m781\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m782\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m783\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":32570,"byte_end":60607,"line_start":807,"line_end":1243,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if !(ferror(stream) != 0) {","highlight_start":9,"highlight_end":36},{"text":"            if !(ferror(zStream) != 0) {","highlight_start":1,"highlight_end":41},{"text":"                's_51: loop {","highlight_start":1,"highlight_end":30},{"text":"                    if !(1 as std::os::raw::c_int as Bool != 0) {","highlight_start":1,"highlight_end":66},{"text":"                        current_block = 926243229934402080;","highlight_start":1,"highlight_end":60},{"text":"                        break;","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    bzf = BZ2_bzReadOpen(","highlight_start":1,"highlight_end":42},{"text":"                        &mut bzerr,","highlight_start":1,"highlight_end":36},{"text":"                        zStream,","highlight_start":1,"highlight_end":33},{"text":"                        verbosity,","highlight_start":1,"highlight_end":35},{"text":"                        smallMode as std::os::raw::c_int,","highlight_start":1,"highlight_end":58},{"text":"                        unused.as_mut_ptr() as *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":74},{"text":"                        nUnused,","highlight_start":1,"highlight_end":33},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                    if bzf.is_null() || bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":76},{"text":"                        current_block = 673979509383251364;","highlight_start":1,"highlight_end":60},{"text":"                        break;","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    streamNo += 1;","highlight_start":1,"highlight_end":35},{"text":"                    while bzerr == 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":62},{"text":"                        nread = BZ2_bzRead(","highlight_start":1,"highlight_end":44},{"text":"                            &mut bzerr,","highlight_start":1,"highlight_end":40},{"text":"                            bzf,","highlight_start":1,"highlight_end":33},{"text":"                            obuf.as_mut_ptr() as *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":76},{"text":"                            5000 as std::os::raw::c_int,","highlight_start":1,"highlight_end":57},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                        if bzerr == -(5 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":66},{"text":"                            current_block = 18063049917807660484;","highlight_start":1,"highlight_end":66},{"text":"                            break 's_51;","highlight_start":1,"highlight_end":41},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        if (bzerr == 0 as std::os::raw::c_int || bzerr == 4 as std::os::raw::c_int)","highlight_start":1,"highlight_end":100},{"text":"                            && nread > 0 as std::os::raw::c_int","highlight_start":1,"highlight_end":64},{"text":"                        {","highlight_start":1,"highlight_end":26},{"text":"                            fwrite(","highlight_start":1,"highlight_end":36},{"text":"                                obuf.as_mut_ptr() as *const std::os::raw::c_void,","highlight_start":1,"highlight_end":82},{"text":"                                ::std::mem::size_of::<UChar>() as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":89},{"text":"                                nread as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":64},{"text":"                                stream,","highlight_start":1,"highlight_end":40},{"text":"                            );","highlight_start":1,"highlight_end":31},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        if ferror(stream) != 0 {","highlight_start":1,"highlight_end":49},{"text":"                            current_block = 5049394217699438129;","highlight_start":1,"highlight_end":65},{"text":"                            break 's_51;","highlight_start":1,"highlight_end":41},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if bzerr != 4 as std::os::raw::c_int {","highlight_start":1,"highlight_end":59},{"text":"                        current_block = 673979509383251364;","highlight_start":1,"highlight_end":60},{"text":"                        break;","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    BZ2_bzReadGetUnused(&mut bzerr, bzf, &mut unusedTmpV, &mut nUnused);","highlight_start":1,"highlight_end":89},{"text":"                    if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":59},{"text":"                        panic(","highlight_start":1,"highlight_end":31},{"text":"                            b\"decompress:bzReadGetUnused\\x00\" as *const u8","highlight_start":1,"highlight_end":75},{"text":"                                as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":64},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    unusedTmp = unusedTmpV as *mut UChar;","highlight_start":1,"highlight_end":58},{"text":"                    i = 0 as std::os::raw::c_int;","highlight_start":1,"highlight_end":50},{"text":"                    while i < nUnused {","highlight_start":1,"highlight_end":40},{"text":"                        unused[i as usize] = *unusedTmp.offset(i as isize);","highlight_start":1,"highlight_end":76},{"text":"                        i += 1","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    BZ2_bzReadClose(&mut bzerr, bzf);","highlight_start":1,"highlight_end":54},{"text":"                    if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":59},{"text":"                        panic(","highlight_start":1,"highlight_end":31},{"text":"                            b\"decompress:bzReadGetUnused\\x00\" as *const u8","highlight_start":1,"highlight_end":75},{"text":"                                as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":64},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if nUnused == 0 as std::os::raw::c_int","highlight_start":1,"highlight_end":59},{"text":"                        && myfeof(zStream) as std::os::raw::c_int != 0","highlight_start":1,"highlight_end":71},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        current_block = 926243229934402080;","highlight_start":1,"highlight_end":60},{"text":"                        break;","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                match current_block {","highlight_start":1,"highlight_end":38},{"text":"                    5049394217699438129 => {}","highlight_start":1,"highlight_end":46},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        match current_block {","highlight_start":1,"highlight_end":46},{"text":"                            18063049917807660484 => {","highlight_start":1,"highlight_end":54},{"text":"                                if forceOverwrite != 0 {","highlight_start":1,"highlight_end":57},{"text":"                                    rewind(zStream);","highlight_start":1,"highlight_end":53},{"text":"                                    loop {","highlight_start":1,"highlight_end":43},{"text":"                                        if !(1 as std::os::raw::c_int as Bool != 0) {","highlight_start":1,"highlight_end":86},{"text":"                                            current_block = 926243229934402080;","highlight_start":1,"highlight_end":80},{"text":"                                            break;","highlight_start":1,"highlight_end":51},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        if myfeof(zStream) != 0 {","highlight_start":1,"highlight_end":66},{"text":"                                            current_block = 926243229934402080;","highlight_start":1,"highlight_end":80},{"text":"                                            break;","highlight_start":1,"highlight_end":51},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        nread = fread(","highlight_start":1,"highlight_end":55},{"text":"                                            obuf.as_mut_ptr() as *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":92},{"text":"                                            ::std::mem::size_of::<UChar>() as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":101},{"text":"                                            5000 as std::os::raw::c_int as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":98},{"text":"                                            zStream,","highlight_start":1,"highlight_end":53},{"text":"                                        ) as Int32;","highlight_start":1,"highlight_end":52},{"text":"                                        if ferror(zStream) != 0 {","highlight_start":1,"highlight_end":66},{"text":"                                            current_block = 5049394217699438129;","highlight_start":1,"highlight_end":81},{"text":"                                            break;","highlight_start":1,"highlight_end":51},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        if nread > 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":78},{"text":"                                            fwrite(","highlight_start":1,"highlight_end":52},{"text":"                                                obuf.as_mut_ptr() as *const std::os::raw::c_void,","highlight_start":1,"highlight_end":98},{"text":"                                                ::std::mem::size_of::<UChar>()","highlight_start":1,"highlight_end":79},{"text":"                                                    as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":78},{"text":"                                                nread as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":80},{"text":"                                                stream,","highlight_start":1,"highlight_end":56},{"text":"                                            );","highlight_start":1,"highlight_end":47},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        if ferror(stream) != 0 {","highlight_start":1,"highlight_end":65},{"text":"                                            current_block = 5049394217699438129;","highlight_start":1,"highlight_end":81},{"text":"                                            break;","highlight_start":1,"highlight_end":51},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    current_block = 673979509383251364;","highlight_start":1,"highlight_end":72},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            _ => {}","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        match current_block {","highlight_start":1,"highlight_end":46},{"text":"                            5049394217699438129 => {}","highlight_start":1,"highlight_end":54},{"text":"                            _ => match current_block {","highlight_start":1,"highlight_end":55},{"text":"                                673979509383251364 => {","highlight_start":1,"highlight_end":56},{"text":"                                    BZ2_bzReadClose(&mut bzerr_dummy, bzf);","highlight_start":1,"highlight_end":76},{"text":"                                    match bzerr {","highlight_start":1,"highlight_end":50},{"text":"                                        -9 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block = 3642457097893642164;","highlight_start":1,"highlight_end":81},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(","highlight_start":1,"highlight_end":59},{"text":"                                                        b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":91},{"text":"                                                            as *const u8","highlight_start":1,"highlight_end":73},{"text":"                                                            as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":92},{"text":"                                                    );","highlight_start":1,"highlight_end":55},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo == 1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":94},{"text":"                                                        return 0 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());","highlight_start":1,"highlight_end":220},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        -6 => {}","highlight_start":1,"highlight_end":49},{"text":"                                        -4 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block = 10766414566319669440;","highlight_start":1,"highlight_end":82},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(","highlight_start":1,"highlight_end":59},{"text":"                                                        b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":91},{"text":"                                                            as *const u8","highlight_start":1,"highlight_end":73},{"text":"                                                            as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":92},{"text":"                                                    );","highlight_start":1,"highlight_end":55},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo == 1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":94},{"text":"                                                        return 0 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());","highlight_start":1,"highlight_end":220},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        -3 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block = 16178635849926953562;","highlight_start":1,"highlight_end":82},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(","highlight_start":1,"highlight_end":59},{"text":"                                                        b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":91},{"text":"                                                            as *const u8","highlight_start":1,"highlight_end":73},{"text":"                                                            as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":92},{"text":"                                                    );","highlight_start":1,"highlight_end":55},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo == 1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":94},{"text":"                                                        return 0 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());","highlight_start":1,"highlight_end":220},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        -7 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block = 5517467152645906530;","highlight_start":1,"highlight_end":81},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(","highlight_start":1,"highlight_end":59},{"text":"                                                        b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":91},{"text":"                                                            as *const u8","highlight_start":1,"highlight_end":73},{"text":"                                                            as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":92},{"text":"                                                    );","highlight_start":1,"highlight_end":55},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo == 1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":94},{"text":"                                                        return 0 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());","highlight_start":1,"highlight_end":220},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        -5 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block = 7372986856480808103;","highlight_start":1,"highlight_end":81},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(","highlight_start":1,"highlight_end":59},{"text":"                                                        b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":91},{"text":"                                                            as *const u8","highlight_start":1,"highlight_end":73},{"text":"                                                            as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":92},{"text":"                                                    );","highlight_start":1,"highlight_end":55},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo == 1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":94},{"text":"                                                        return 0 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());","highlight_start":1,"highlight_end":220},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        _ => {","highlight_start":1,"highlight_end":47},{"text":"                                            current_block = 6455255476181645667;","highlight_start":1,"highlight_end":81},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(","highlight_start":1,"highlight_end":59},{"text":"                                                        b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":91},{"text":"                                                            as *const u8","highlight_start":1,"highlight_end":73},{"text":"                                                            as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":92},{"text":"                                                    );","highlight_start":1,"highlight_end":55},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo == 1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":94},{"text":"                                                        return 0 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());","highlight_start":1,"highlight_end":220},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                _ => {","highlight_start":1,"highlight_end":39},{"text":"                                    if !(ferror(zStream) != 0) {","highlight_start":1,"highlight_end":65},{"text":"                                        if stream != __stdoutp {","highlight_start":1,"highlight_end":65},{"text":"                                            let mut fd: Int32 = fileno(stream);","highlight_start":1,"highlight_end":80},{"text":"                                            if fd < 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":79},{"text":"                                                current_block = 5049394217699438129;","highlight_start":1,"highlight_end":85},{"text":"                                            } else {","highlight_start":1,"highlight_end":53},{"text":"                                                applySavedFileAttrToOutputFile(fd);","highlight_start":1,"highlight_end":84},{"text":"                                                current_block = 14832935472441733737;","highlight_start":1,"highlight_end":86},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            current_block = 14832935472441733737;","highlight_start":1,"highlight_end":82},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        match current_block {","highlight_start":1,"highlight_end":62},{"text":"                                            5049394217699438129 => {}","highlight_start":1,"highlight_end":70},{"text":"                                            _ => {","highlight_start":1,"highlight_end":51},{"text":"                                                ret = fclose(zStream);","highlight_start":1,"highlight_end":71},{"text":"                                                if !(ret == -(1 as std::os::raw::c_int)) {","highlight_start":1,"highlight_end":91},{"text":"                                                    if !(ferror(stream) != 0) {","highlight_start":1,"highlight_end":80},{"text":"                                                        ret = fflush(stream);","highlight_start":1,"highlight_end":78},{"text":"                                                        if !(ret != 0 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":96},{"text":"                                                            if stream != __stdoutp {","highlight_start":1,"highlight_end":85},{"text":"                                                                ret = fclose(stream);","highlight_start":1,"highlight_end":86},{"text":"                                                                outputHandleJustInCase =","highlight_start":1,"highlight_end":89},{"text":"                                                                    0 as *mut FILE;","highlight_start":1,"highlight_end":84},{"text":"                                                                if ret","highlight_start":1,"highlight_end":71},{"text":"                                                                    == -(1 as std::os::raw::c_int)","highlight_start":1,"highlight_end":99},{"text":"                                                                {","highlight_start":1,"highlight_end":66},{"text":"                                                                    current_block =","highlight_start":1,"highlight_end":84},{"text":"                                                                        5049394217699438129;","highlight_start":1,"highlight_end":93},{"text":"                                                                } else {","highlight_start":1,"highlight_end":73},{"text":"                                                                    current_block =","highlight_start":1,"highlight_end":84},{"text":"                                                                        14775119014532381840;","highlight_start":1,"highlight_end":94},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                            } else {","highlight_start":1,"highlight_end":69},{"text":"                                                                current_block =","highlight_start":1,"highlight_end":80},{"text":"                                                                    14775119014532381840;","highlight_start":1,"highlight_end":90},{"text":"                                                            }","highlight_start":1,"highlight_end":62},{"text":"                                                            match current_block {","highlight_start":1,"highlight_end":82},{"text":"                                                                5049394217699438129 => {}","highlight_start":1,"highlight_end":90},{"text":"                                                                _ => {","highlight_start":1,"highlight_end":71},{"text":"                                                                    outputHandleJustInCase =","highlight_start":1,"highlight_end":93},{"text":"                                                                        0 as *mut FILE;","highlight_start":1,"highlight_end":88},{"text":"                                                                    if verbosity","highlight_start":1,"highlight_end":81},{"text":"                                                                        >= 2 as std::os::raw::c_int","highlight_start":1,"highlight_end":100},{"text":"                                                                    {","highlight_start":1,"highlight_end":70},{"text":"                                                                        fprintf (__stderrp, b\"\\n    \\x00\" as * const u8 as * const std :: os :: raw :: c_char);","highlight_start":1,"highlight_end":160},{"text":"                                                                    }","highlight_start":1,"highlight_end":70},{"text":"                                                                    return 1 as std::os::raw::c_int","highlight_start":1,"highlight_end":100},{"text":"                                                                        as Bool;","highlight_start":1,"highlight_end":81},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                            }","highlight_start":1,"highlight_end":62},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":32570,"byte_end":60607,"line_start":807,"line_end":1243,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if !(ferror(stream) != 0) {","highlight_start":9,"highlight_end":36},{"text":"            if !(ferror(zStream) != 0) {","highlight_start":1,"highlight_end":41},{"text":"                's_51: loop {","highlight_start":1,"highlight_end":30},{"text":"                    if !(1 as std::os::raw::c_int as Bool != 0) {","highlight_start":1,"highlight_end":66},{"text":"                        current_block = 926243229934402080;","highlight_start":1,"highlight_end":60},{"text":"                        break;","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    bzf = BZ2_bzReadOpen(","highlight_start":1,"highlight_end":42},{"text":"                        &mut bzerr,","highlight_start":1,"highlight_end":36},{"text":"                        zStream,","highlight_start":1,"highlight_end":33},{"text":"                        verbosity,","highlight_start":1,"highlight_end":35},{"text":"                        smallMode as std::os::raw::c_int,","highlight_start":1,"highlight_end":58},{"text":"                        unused.as_mut_ptr() as *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":74},{"text":"                        nUnused,","highlight_start":1,"highlight_end":33},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                    if bzf.is_null() || bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":76},{"text":"                        current_block = 673979509383251364;","highlight_start":1,"highlight_end":60},{"text":"                        break;","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    streamNo += 1;","highlight_start":1,"highlight_end":35},{"text":"                    while bzerr == 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":62},{"text":"                        nread = BZ2_bzRead(","highlight_start":1,"highlight_end":44},{"text":"                            &mut bzerr,","highlight_start":1,"highlight_end":40},{"text":"                            bzf,","highlight_start":1,"highlight_end":33},{"text":"                            obuf.as_mut_ptr() as *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":76},{"text":"                            5000 as std::os::raw::c_int,","highlight_start":1,"highlight_end":57},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                        if bzerr == -(5 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":66},{"text":"                            current_block = 18063049917807660484;","highlight_start":1,"highlight_end":66},{"text":"                            break 's_51;","highlight_start":1,"highlight_end":41},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        if (bzerr == 0 as std::os::raw::c_int || bzerr == 4 as std::os::raw::c_int)","highlight_start":1,"highlight_end":100},{"text":"                            && nread > 0 as std::os::raw::c_int","highlight_start":1,"highlight_end":64},{"text":"                        {","highlight_start":1,"highlight_end":26},{"text":"                            fwrite(","highlight_start":1,"highlight_end":36},{"text":"                                obuf.as_mut_ptr() as *const std::os::raw::c_void,","highlight_start":1,"highlight_end":82},{"text":"                                ::std::mem::size_of::<UChar>() as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":89},{"text":"                                nread as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":64},{"text":"                                stream,","highlight_start":1,"highlight_end":40},{"text":"                            );","highlight_start":1,"highlight_end":31},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        if ferror(stream) != 0 {","highlight_start":1,"highlight_end":49},{"text":"                            current_block = 5049394217699438129;","highlight_start":1,"highlight_end":65},{"text":"                            break 's_51;","highlight_start":1,"highlight_end":41},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if bzerr != 4 as std::os::raw::c_int {","highlight_start":1,"highlight_end":59},{"text":"                        current_block = 673979509383251364;","highlight_start":1,"highlight_end":60},{"text":"                        break;","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    BZ2_bzReadGetUnused(&mut bzerr, bzf, &mut unusedTmpV, &mut nUnused);","highlight_start":1,"highlight_end":89},{"text":"                    if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":59},{"text":"                        panic(","highlight_start":1,"highlight_end":31},{"text":"                            b\"decompress:bzReadGetUnused\\x00\" as *const u8","highlight_start":1,"highlight_end":75},{"text":"                                as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":64},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    unusedTmp = unusedTmpV as *mut UChar;","highlight_start":1,"highlight_end":58},{"text":"                    i = 0 as std::os::raw::c_int;","highlight_start":1,"highlight_end":50},{"text":"                    while i < nUnused {","highlight_start":1,"highlight_end":40},{"text":"                        unused[i as usize] = *unusedTmp.offset(i as isize);","highlight_start":1,"highlight_end":76},{"text":"                        i += 1","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    BZ2_bzReadClose(&mut bzerr, bzf);","highlight_start":1,"highlight_end":54},{"text":"                    if bzerr != 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":59},{"text":"                        panic(","highlight_start":1,"highlight_end":31},{"text":"                            b\"decompress:bzReadGetUnused\\x00\" as *const u8","highlight_start":1,"highlight_end":75},{"text":"                                as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":64},{"text":"                        );","highlight_start":1,"highlight_end":27},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    if nUnused == 0 as std::os::raw::c_int","highlight_start":1,"highlight_end":59},{"text":"                        && myfeof(zStream) as std::os::raw::c_int != 0","highlight_start":1,"highlight_end":71},{"text":"                    {","highlight_start":1,"highlight_end":22},{"text":"                        current_block = 926243229934402080;","highlight_start":1,"highlight_end":60},{"text":"                        break;","highlight_start":1,"highlight_end":31},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                match current_block {","highlight_start":1,"highlight_end":38},{"text":"                    5049394217699438129 => {}","highlight_start":1,"highlight_end":46},{"text":"                    _ => {","highlight_start":1,"highlight_end":27},{"text":"                        match current_block {","highlight_start":1,"highlight_end":46},{"text":"                            18063049917807660484 => {","highlight_start":1,"highlight_end":54},{"text":"                                if forceOverwrite != 0 {","highlight_start":1,"highlight_end":57},{"text":"                                    rewind(zStream);","highlight_start":1,"highlight_end":53},{"text":"                                    loop {","highlight_start":1,"highlight_end":43},{"text":"                                        if !(1 as std::os::raw::c_int as Bool != 0) {","highlight_start":1,"highlight_end":86},{"text":"                                            current_block = 926243229934402080;","highlight_start":1,"highlight_end":80},{"text":"                                            break;","highlight_start":1,"highlight_end":51},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        if myfeof(zStream) != 0 {","highlight_start":1,"highlight_end":66},{"text":"                                            current_block = 926243229934402080;","highlight_start":1,"highlight_end":80},{"text":"                                            break;","highlight_start":1,"highlight_end":51},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        nread = fread(","highlight_start":1,"highlight_end":55},{"text":"                                            obuf.as_mut_ptr() as *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":92},{"text":"                                            ::std::mem::size_of::<UChar>() as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":101},{"text":"                                            5000 as std::os::raw::c_int as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":98},{"text":"                                            zStream,","highlight_start":1,"highlight_end":53},{"text":"                                        ) as Int32;","highlight_start":1,"highlight_end":52},{"text":"                                        if ferror(zStream) != 0 {","highlight_start":1,"highlight_end":66},{"text":"                                            current_block = 5049394217699438129;","highlight_start":1,"highlight_end":81},{"text":"                                            break;","highlight_start":1,"highlight_end":51},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        if nread > 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":78},{"text":"                                            fwrite(","highlight_start":1,"highlight_end":52},{"text":"                                                obuf.as_mut_ptr() as *const std::os::raw::c_void,","highlight_start":1,"highlight_end":98},{"text":"                                                ::std::mem::size_of::<UChar>()","highlight_start":1,"highlight_end":79},{"text":"                                                    as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":78},{"text":"                                                nread as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":80},{"text":"                                                stream,","highlight_start":1,"highlight_end":56},{"text":"                                            );","highlight_start":1,"highlight_end":47},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        if ferror(stream) != 0 {","highlight_start":1,"highlight_end":65},{"text":"                                            current_block = 5049394217699438129;","highlight_start":1,"highlight_end":81},{"text":"                                            break;","highlight_start":1,"highlight_end":51},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                } else {","highlight_start":1,"highlight_end":41},{"text":"                                    current_block = 673979509383251364;","highlight_start":1,"highlight_end":72},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            }","highlight_start":1,"highlight_end":30},{"text":"                            _ => {}","highlight_start":1,"highlight_end":36},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                        match current_block {","highlight_start":1,"highlight_end":46},{"text":"                            5049394217699438129 => {}","highlight_start":1,"highlight_end":54},{"text":"                            _ => match current_block {","highlight_start":1,"highlight_end":55},{"text":"                                673979509383251364 => {","highlight_start":1,"highlight_end":56},{"text":"                                    BZ2_bzReadClose(&mut bzerr_dummy, bzf);","highlight_start":1,"highlight_end":76},{"text":"                                    match bzerr {","highlight_start":1,"highlight_end":50},{"text":"                                        -9 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block = 3642457097893642164;","highlight_start":1,"highlight_end":81},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(","highlight_start":1,"highlight_end":59},{"text":"                                                        b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":91},{"text":"                                                            as *const u8","highlight_start":1,"highlight_end":73},{"text":"                                                            as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":92},{"text":"                                                    );","highlight_start":1,"highlight_end":55},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo == 1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":94},{"text":"                                                        return 0 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());","highlight_start":1,"highlight_end":220},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        -6 => {}","highlight_start":1,"highlight_end":49},{"text":"                                        -4 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block = 10766414566319669440;","highlight_start":1,"highlight_end":82},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(","highlight_start":1,"highlight_end":59},{"text":"                                                        b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":91},{"text":"                                                            as *const u8","highlight_start":1,"highlight_end":73},{"text":"                                                            as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":92},{"text":"                                                    );","highlight_start":1,"highlight_end":55},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo == 1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":94},{"text":"                                                        return 0 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());","highlight_start":1,"highlight_end":220},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        -3 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block = 16178635849926953562;","highlight_start":1,"highlight_end":82},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(","highlight_start":1,"highlight_end":59},{"text":"                                                        b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":91},{"text":"                                                            as *const u8","highlight_start":1,"highlight_end":73},{"text":"                                                            as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":92},{"text":"                                                    );","highlight_start":1,"highlight_end":55},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo == 1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":94},{"text":"                                                        return 0 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());","highlight_start":1,"highlight_end":220},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        -7 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block = 5517467152645906530;","highlight_start":1,"highlight_end":81},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(","highlight_start":1,"highlight_end":59},{"text":"                                                        b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":91},{"text":"                                                            as *const u8","highlight_start":1,"highlight_end":73},{"text":"                                                            as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":92},{"text":"                                                    );","highlight_start":1,"highlight_end":55},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo == 1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":94},{"text":"                                                        return 0 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());","highlight_start":1,"highlight_end":220},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        -5 => {","highlight_start":1,"highlight_end":48},{"text":"                                            current_block = 7372986856480808103;","highlight_start":1,"highlight_end":81},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(","highlight_start":1,"highlight_end":59},{"text":"                                                        b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":91},{"text":"                                                            as *const u8","highlight_start":1,"highlight_end":73},{"text":"                                                            as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":92},{"text":"                                                    );","highlight_start":1,"highlight_end":55},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo == 1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":94},{"text":"                                                        return 0 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());","highlight_start":1,"highlight_end":220},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        _ => {","highlight_start":1,"highlight_end":47},{"text":"                                            current_block = 6455255476181645667;","highlight_start":1,"highlight_end":81},{"text":"                                            match current_block {","highlight_start":1,"highlight_end":66},{"text":"                                                6455255476181645667 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    panic(","highlight_start":1,"highlight_end":59},{"text":"                                                        b\"decompress:unexpected error\\x00\"","highlight_start":1,"highlight_end":91},{"text":"                                                            as *const u8","highlight_start":1,"highlight_end":73},{"text":"                                                            as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":92},{"text":"                                                    );","highlight_start":1,"highlight_end":55},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                3642457097893642164 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    configError();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                10766414566319669440 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    crcError();","highlight_start":1,"highlight_end":64},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                16178635849926953562 => {","highlight_start":1,"highlight_end":74},{"text":"                                                    outOfMemory();","highlight_start":1,"highlight_end":67},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                5517467152645906530 => {","highlight_start":1,"highlight_end":73},{"text":"                                                    compressedStreamEOF();","highlight_start":1,"highlight_end":75},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                                _ => {","highlight_start":1,"highlight_end":55},{"text":"                                                    if zStream != __stdinp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(zStream);","highlight_start":1,"highlight_end":73},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if stream != __stdoutp {","highlight_start":1,"highlight_end":77},{"text":"                                                        fclose(stream);","highlight_start":1,"highlight_end":72},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                    if streamNo == 1 as std::os::raw::c_int {","highlight_start":1,"highlight_end":94},{"text":"                                                        return 0 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    } else {","highlight_start":1,"highlight_end":61},{"text":"                                                        if noisy != 0 {","highlight_start":1,"highlight_end":72},{"text":"                                                            fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());","highlight_start":1,"highlight_end":220},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                        return 1 as std::os::raw::c_int as Bool;","highlight_start":1,"highlight_end":97},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                                _ => {","highlight_start":1,"highlight_end":39},{"text":"                                    if !(ferror(zStream) != 0) {","highlight_start":1,"highlight_end":65},{"text":"                                        if stream != __stdoutp {","highlight_start":1,"highlight_end":65},{"text":"                                            let mut fd: Int32 = fileno(stream);","highlight_start":1,"highlight_end":80},{"text":"                                            if fd < 0 as std::os::raw::c_int {","highlight_start":1,"highlight_end":79},{"text":"                                                current_block = 5049394217699438129;","highlight_start":1,"highlight_end":85},{"text":"                                            } else {","highlight_start":1,"highlight_end":53},{"text":"                                                applySavedFileAttrToOutputFile(fd);","highlight_start":1,"highlight_end":84},{"text":"                                                current_block = 14832935472441733737;","highlight_start":1,"highlight_end":86},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        } else {","highlight_start":1,"highlight_end":49},{"text":"                                            current_block = 14832935472441733737;","highlight_start":1,"highlight_end":82},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                        match current_block {","highlight_start":1,"highlight_end":62},{"text":"                                            5049394217699438129 => {}","highlight_start":1,"highlight_end":70},{"text":"                                            _ => {","highlight_start":1,"highlight_end":51},{"text":"                                                ret = fclose(zStream);","highlight_start":1,"highlight_end":71},{"text":"                                                if !(ret == -(1 as std::os::raw::c_int)) {","highlight_start":1,"highlight_end":91},{"text":"                                                    if !(ferror(stream) != 0) {","highlight_start":1,"highlight_end":80},{"text":"                                                        ret = fflush(stream);","highlight_start":1,"highlight_end":78},{"text":"                                                        if !(ret != 0 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":96},{"text":"                                                            if stream != __stdoutp {","highlight_start":1,"highlight_end":85},{"text":"                                                                ret = fclose(stream);","highlight_start":1,"highlight_end":86},{"text":"                                                                outputHandleJustInCase =","highlight_start":1,"highlight_end":89},{"text":"                                                                    0 as *mut FILE;","highlight_start":1,"highlight_end":84},{"text":"                                                                if ret","highlight_start":1,"highlight_end":71},{"text":"                                                                    == -(1 as std::os::raw::c_int)","highlight_start":1,"highlight_end":99},{"text":"                                                                {","highlight_start":1,"highlight_end":66},{"text":"                                                                    current_block =","highlight_start":1,"highlight_end":84},{"text":"                                                                        5049394217699438129;","highlight_start":1,"highlight_end":93},{"text":"                                                                } else {","highlight_start":1,"highlight_end":73},{"text":"                                                                    current_block =","highlight_start":1,"highlight_end":84},{"text":"                                                                        14775119014532381840;","highlight_start":1,"highlight_end":94},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                            } else {","highlight_start":1,"highlight_end":69},{"text":"                                                                current_block =","highlight_start":1,"highlight_end":80},{"text":"                                                                    14775119014532381840;","highlight_start":1,"highlight_end":90},{"text":"                                                            }","highlight_start":1,"highlight_end":62},{"text":"                                                            match current_block {","highlight_start":1,"highlight_end":82},{"text":"                                                                5049394217699438129 => {}","highlight_start":1,"highlight_end":90},{"text":"                                                                _ => {","highlight_start":1,"highlight_end":71},{"text":"                                                                    outputHandleJustInCase =","highlight_start":1,"highlight_end":93},{"text":"                                                                        0 as *mut FILE;","highlight_start":1,"highlight_end":88},{"text":"                                                                    if verbosity","highlight_start":1,"highlight_end":81},{"text":"                                                                        >= 2 as std::os::raw::c_int","highlight_start":1,"highlight_end":100},{"text":"                                                                    {","highlight_start":1,"highlight_end":70},{"text":"                                                                        fprintf (__stderrp, b\"\\n    \\x00\" as * const u8 as * const std :: os :: raw :: c_char);","highlight_start":1,"highlight_end":160},{"text":"                                                                    }","highlight_start":1,"highlight_end":70},{"text":"                                                                    return 1 as std::os::raw::c_int","highlight_start":1,"highlight_end":100},{"text":"                                                                        as Bool;","highlight_start":1,"highlight_end":81},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                            }","highlight_start":1,"highlight_end":62},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50},{"text":"                                            }","highlight_start":1,"highlight_end":46},{"text":"                                        }","highlight_start":1,"highlight_end":42},{"text":"                                    }","highlight_start":1,"highlight_end":38},{"text":"                                }","highlight_start":1,"highlight_end":34},{"text":"                            },","highlight_start":1,"highlight_end":31},{"text":"                        }","highlight_start":1,"highlight_end":26},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"if !(ferror(stream) != 0) && !(ferror(zStream) != 0) {\n            's_51: loop {\n                if !(1 as std::os::raw::c_int as Bool != 0) {\n                    current_block = 926243229934402080;\n                    break;\n                }\n                bzf = BZ2_bzReadOpen(\n                    &mut bzerr,\n                    zStream,\n                    verbosity,\n                    smallMode as std::os::raw::c_int,\n                    unused.as_mut_ptr() as *mut std::os::raw::c_void,\n                    nUnused,\n                );\n                if bzf.is_null() || bzerr != 0 as std::os::raw::c_int {\n                    current_block = 673979509383251364;\n                    break;\n                }\n                streamNo += 1;\n                while bzerr == 0 as std::os::raw::c_int {\n                    nread = BZ2_bzRead(\n                        &mut bzerr,\n                        bzf,\n                        obuf.as_mut_ptr() as *mut std::os::raw::c_void,\n                        5000 as std::os::raw::c_int,\n                    );\n                    if bzerr == -(5 as std::os::raw::c_int) {\n                        current_block = 18063049917807660484;\n                        break 's_51;\n                    }\n                    if (bzerr == 0 as std::os::raw::c_int || bzerr == 4 as std::os::raw::c_int)\n                        && nread > 0 as std::os::raw::c_int\n                    {\n                        fwrite(\n                            obuf.as_mut_ptr() as *const std::os::raw::c_void,\n                            ::std::mem::size_of::<UChar>() as std::os::raw::c_ulong,\n                            nread as std::os::raw::c_ulong,\n                            stream,\n                        );\n                    }\n                    if ferror(stream) != 0 {\n                        current_block = 5049394217699438129;\n                        break 's_51;\n                    }\n                }\n                if bzerr != 4 as std::os::raw::c_int {\n                    current_block = 673979509383251364;\n                    break;\n                }\n                BZ2_bzReadGetUnused(&mut bzerr, bzf, &mut unusedTmpV, &mut nUnused);\n                if bzerr != 0 as std::os::raw::c_int {\n                    panic(\n                        b\"decompress:bzReadGetUnused\\x00\" as *const u8\n                            as *const std::os::raw::c_char,\n                    );\n                }\n                unusedTmp = unusedTmpV as *mut UChar;\n                i = 0 as std::os::raw::c_int;\n                while i < nUnused {\n                    unused[i as usize] = *unusedTmp.offset(i as isize);\n                    i += 1\n                }\n                BZ2_bzReadClose(&mut bzerr, bzf);\n                if bzerr != 0 as std::os::raw::c_int {\n                    panic(\n                        b\"decompress:bzReadGetUnused\\x00\" as *const u8\n                            as *const std::os::raw::c_char,\n                    );\n                }\n                if nUnused == 0 as std::os::raw::c_int\n                    && myfeof(zStream) as std::os::raw::c_int != 0\n                {\n                    current_block = 926243229934402080;\n                    break;\n                }\n            }\n            match current_block {\n                5049394217699438129 => {}\n                _ => {\n                    match current_block {\n                        18063049917807660484 => {\n                            if forceOverwrite != 0 {\n                                rewind(zStream);\n                                loop {\n                                    if !(1 as std::os::raw::c_int as Bool != 0) {\n                                        current_block = 926243229934402080;\n                                        break;\n                                    }\n                                    if myfeof(zStream) != 0 {\n                                        current_block = 926243229934402080;\n                                        break;\n                                    }\n                                    nread = fread(\n                                        obuf.as_mut_ptr() as *mut std::os::raw::c_void,\n                                        ::std::mem::size_of::<UChar>() as std::os::raw::c_ulong,\n                                        5000 as std::os::raw::c_int as std::os::raw::c_ulong,\n                                        zStream,\n                                    ) as Int32;\n                                    if ferror(zStream) != 0 {\n                                        current_block = 5049394217699438129;\n                                        break;\n                                    }\n                                    if nread > 0 as std::os::raw::c_int {\n                                        fwrite(\n                                            obuf.as_mut_ptr() as *const std::os::raw::c_void,\n                                            ::std::mem::size_of::<UChar>()\n                                                as std::os::raw::c_ulong,\n                                            nread as std::os::raw::c_ulong,\n                                            stream,\n                                        );\n                                    }\n                                    if ferror(stream) != 0 {\n                                        current_block = 5049394217699438129;\n                                        break;\n                                    }\n                                }\n                            } else {\n                                current_block = 673979509383251364;\n                            }\n                        }\n                        _ => {}\n                    }\n                    match current_block {\n                        5049394217699438129 => {}\n                        _ => match current_block {\n                            673979509383251364 => {\n                                BZ2_bzReadClose(&mut bzerr_dummy, bzf);\n                                match bzerr {\n                                    -9 => {\n                                        current_block = 3642457097893642164;\n                                        match current_block {\n                                            6455255476181645667 => {\n                                                panic(\n                                                    b\"decompress:unexpected error\\x00\"\n                                                        as *const u8\n                                                        as *const std::os::raw::c_char,\n                                                );\n                                            }\n                                            3642457097893642164 => {\n                                                configError();\n                                            }\n                                            10766414566319669440 => {\n                                                crcError();\n                                            }\n                                            16178635849926953562 => {\n                                                outOfMemory();\n                                            }\n                                            5517467152645906530 => {\n                                                compressedStreamEOF();\n                                            }\n                                            _ => {\n                                                if zStream != __stdinp {\n                                                    fclose(zStream);\n                                                }\n                                                if stream != __stdoutp {\n                                                    fclose(stream);\n                                                }\n                                                if streamNo == 1 as std::os::raw::c_int {\n                                                    return 0 as std::os::raw::c_int as Bool;\n                                                } else {\n                                                    if noisy != 0 {\n                                                        fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());\n                                                    }\n                                                    return 1 as std::os::raw::c_int as Bool;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    -6 => {}\n                                    -4 => {\n                                        current_block = 10766414566319669440;\n                                        match current_block {\n                                            6455255476181645667 => {\n                                                panic(\n                                                    b\"decompress:unexpected error\\x00\"\n                                                        as *const u8\n                                                        as *const std::os::raw::c_char,\n                                                );\n                                            }\n                                            3642457097893642164 => {\n                                                configError();\n                                            }\n                                            10766414566319669440 => {\n                                                crcError();\n                                            }\n                                            16178635849926953562 => {\n                                                outOfMemory();\n                                            }\n                                            5517467152645906530 => {\n                                                compressedStreamEOF();\n                                            }\n                                            _ => {\n                                                if zStream != __stdinp {\n                                                    fclose(zStream);\n                                                }\n                                                if stream != __stdoutp {\n                                                    fclose(stream);\n                                                }\n                                                if streamNo == 1 as std::os::raw::c_int {\n                                                    return 0 as std::os::raw::c_int as Bool;\n                                                } else {\n                                                    if noisy != 0 {\n                                                        fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());\n                                                    }\n                                                    return 1 as std::os::raw::c_int as Bool;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    -3 => {\n                                        current_block = 16178635849926953562;\n                                        match current_block {\n                                            6455255476181645667 => {\n                                                panic(\n                                                    b\"decompress:unexpected error\\x00\"\n                                                        as *const u8\n                                                        as *const std::os::raw::c_char,\n                                                );\n                                            }\n                                            3642457097893642164 => {\n                                                configError();\n                                            }\n                                            10766414566319669440 => {\n                                                crcError();\n                                            }\n                                            16178635849926953562 => {\n                                                outOfMemory();\n                                            }\n                                            5517467152645906530 => {\n                                                compressedStreamEOF();\n                                            }\n                                            _ => {\n                                                if zStream != __stdinp {\n                                                    fclose(zStream);\n                                                }\n                                                if stream != __stdoutp {\n                                                    fclose(stream);\n                                                }\n                                                if streamNo == 1 as std::os::raw::c_int {\n                                                    return 0 as std::os::raw::c_int as Bool;\n                                                } else {\n                                                    if noisy != 0 {\n                                                        fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());\n                                                    }\n                                                    return 1 as std::os::raw::c_int as Bool;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    -7 => {\n                                        current_block = 5517467152645906530;\n                                        match current_block {\n                                            6455255476181645667 => {\n                                                panic(\n                                                    b\"decompress:unexpected error\\x00\"\n                                                        as *const u8\n                                                        as *const std::os::raw::c_char,\n                                                );\n                                            }\n                                            3642457097893642164 => {\n                                                configError();\n                                            }\n                                            10766414566319669440 => {\n                                                crcError();\n                                            }\n                                            16178635849926953562 => {\n                                                outOfMemory();\n                                            }\n                                            5517467152645906530 => {\n                                                compressedStreamEOF();\n                                            }\n                                            _ => {\n                                                if zStream != __stdinp {\n                                                    fclose(zStream);\n                                                }\n                                                if stream != __stdoutp {\n                                                    fclose(stream);\n                                                }\n                                                if streamNo == 1 as std::os::raw::c_int {\n                                                    return 0 as std::os::raw::c_int as Bool;\n                                                } else {\n                                                    if noisy != 0 {\n                                                        fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());\n                                                    }\n                                                    return 1 as std::os::raw::c_int as Bool;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    -5 => {\n                                        current_block = 7372986856480808103;\n                                        match current_block {\n                                            6455255476181645667 => {\n                                                panic(\n                                                    b\"decompress:unexpected error\\x00\"\n                                                        as *const u8\n                                                        as *const std::os::raw::c_char,\n                                                );\n                                            }\n                                            3642457097893642164 => {\n                                                configError();\n                                            }\n                                            10766414566319669440 => {\n                                                crcError();\n                                            }\n                                            16178635849926953562 => {\n                                                outOfMemory();\n                                            }\n                                            5517467152645906530 => {\n                                                compressedStreamEOF();\n                                            }\n                                            _ => {\n                                                if zStream != __stdinp {\n                                                    fclose(zStream);\n                                                }\n                                                if stream != __stdoutp {\n                                                    fclose(stream);\n                                                }\n                                                if streamNo == 1 as std::os::raw::c_int {\n                                                    return 0 as std::os::raw::c_int as Bool;\n                                                } else {\n                                                    if noisy != 0 {\n                                                        fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());\n                                                    }\n                                                    return 1 as std::os::raw::c_int as Bool;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    _ => {\n                                        current_block = 6455255476181645667;\n                                        match current_block {\n                                            6455255476181645667 => {\n                                                panic(\n                                                    b\"decompress:unexpected error\\x00\"\n                                                        as *const u8\n                                                        as *const std::os::raw::c_char,\n                                                );\n                                            }\n                                            3642457097893642164 => {\n                                                configError();\n                                            }\n                                            10766414566319669440 => {\n                                                crcError();\n                                            }\n                                            16178635849926953562 => {\n                                                outOfMemory();\n                                            }\n                                            5517467152645906530 => {\n                                                compressedStreamEOF();\n                                            }\n                                            _ => {\n                                                if zStream != __stdinp {\n                                                    fclose(zStream);\n                                                }\n                                                if stream != __stdoutp {\n                                                    fclose(stream);\n                                                }\n                                                if streamNo == 1 as std::os::raw::c_int {\n                                                    return 0 as std::os::raw::c_int as Bool;\n                                                } else {\n                                                    if noisy != 0 {\n                                                        fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());\n                                                    }\n                                                    return 1 as std::os::raw::c_int as Bool;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            _ => {\n                                if !(ferror(zStream) != 0) {\n                                    if stream != __stdoutp {\n                                        let mut fd: Int32 = fileno(stream);\n                                        if fd < 0 as std::os::raw::c_int {\n                                            current_block = 5049394217699438129;\n                                        } else {\n                                            applySavedFileAttrToOutputFile(fd);\n                                            current_block = 14832935472441733737;\n                                        }\n                                    } else {\n                                        current_block = 14832935472441733737;\n                                    }\n                                    match current_block {\n                                        5049394217699438129 => {}\n                                        _ => {\n                                            ret = fclose(zStream);\n                                            if !(ret == -(1 as std::os::raw::c_int)) {\n                                                if !(ferror(stream) != 0) {\n                                                    ret = fflush(stream);\n                                                    if !(ret != 0 as std::os::raw::c_int) {\n                                                        if stream != __stdoutp {\n                                                            ret = fclose(stream);\n                                                            outputHandleJustInCase =\n                                                                0 as *mut FILE;\n                                                            if ret\n                                                                == -(1 as std::os::raw::c_int)\n                                                            {\n                                                                current_block =\n                                                                    5049394217699438129;\n                                                            } else {\n                                                                current_block =\n                                                                    14775119014532381840;\n                                                            }\n                                                        } else {\n                                                            current_block =\n                                                                14775119014532381840;\n                                                        }\n                                                        match current_block {\n                                                            5049394217699438129 => {}\n                                                            _ => {\n                                                                outputHandleJustInCase =\n                                                                    0 as *mut FILE;\n                                                                if verbosity\n                                                                    >= 2 as std::os::raw::c_int\n                                                                {\n                                                                    fprintf (__stderrp, b\"\\n    \\x00\" as * const u8 as * const std :: os :: raw :: c_char);\n                                                                }\n                                                                return 1 as std::os::raw::c_int\n                                                                    as Bool;\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        },\n                    }\n                }\n            }\n        }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:807:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m807\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if !(ferror(stream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m808\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if !(ferror(zStream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m809\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                's_51: loop {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m810\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    if !(1 as std::os::raw::c_int as Bool != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1242\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m807\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mif !(ferror(stream) != 0) && !(ferror(zStream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m808\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+             's_51: loop {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m809\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 if !(1 as std::os::raw::c_int as Bool != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m810\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     current_block = 926243229934402080;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m811\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     break;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m812\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m813\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 bzf = BZ2_bzReadOpen(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m814\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     &mut bzerr,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m815\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     zStream,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m816\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     verbosity,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m817\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     smallMode as std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m818\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     unused.as_mut_ptr() as *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m819\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     nUnused,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m820\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m821\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 if bzf.is_null() || bzerr != 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m822\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     current_block = 673979509383251364;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m823\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     break;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m824\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m825\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 streamNo += 1;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m826\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 while bzerr == 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m827\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     nread = BZ2_bzRead(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m828\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         &mut bzerr,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m829\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         bzf,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m830\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         obuf.as_mut_ptr() as *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m831\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         5000 as std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m832\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m833\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     if bzerr == -(5 as std::os::raw::c_int) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m834\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         current_block = 18063049917807660484;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m835\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         break 's_51;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m836\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m837\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     if (bzerr == 0 as std::os::raw::c_int || bzerr == 4 as std::os::raw::c_int)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m838\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         && nread > 0 as std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m839\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m840\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         fwrite(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m841\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             obuf.as_mut_ptr() as *const std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m842\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             ::std::mem::size_of::<UChar>() as std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m843\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             nread as std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m844\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             stream,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m845\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m846\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m847\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     if ferror(stream) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m848\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         current_block = 5049394217699438129;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m849\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         break 's_51;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m850\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m851\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m852\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 if bzerr != 4 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m853\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     current_block = 673979509383251364;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m854\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     break;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m855\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m856\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 BZ2_bzReadGetUnused(&mut bzerr, bzf, &mut unusedTmpV, &mut nUnused);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m857\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 if bzerr != 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m858\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     panic(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m859\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         b\"decompress:bzReadGetUnused\\x00\" as *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m860\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m861\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m862\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m863\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 unusedTmp = unusedTmpV as *mut UChar;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m864\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 i = 0 as std::os::raw::c_int;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m865\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 while i < nUnused {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m866\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     unused[i as usize] = *unusedTmp.offset(i as isize);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m867\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     i += 1\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m868\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m869\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 BZ2_bzReadClose(&mut bzerr, bzf);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m870\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 if bzerr != 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m871\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     panic(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m872\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         b\"decompress:bzReadGetUnused\\x00\" as *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m873\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m874\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m875\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m876\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 if nUnused == 0 as std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m877\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     && myfeof(zStream) as std::os::raw::c_int != 0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m878\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m879\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     current_block = 926243229934402080;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m880\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     break;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m881\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m882\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m883\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+             match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m884\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 5049394217699438129 => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m885\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                 _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m886\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m887\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         18063049917807660484 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m888\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             if forceOverwrite != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m889\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 rewind(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m890\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 loop {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m891\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     if !(1 as std::os::raw::c_int as Bool != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m892\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block = 926243229934402080;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m893\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         break;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m894\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m895\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     if myfeof(zStream) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m896\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block = 926243229934402080;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m897\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         break;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m898\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m899\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     nread = fread(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m900\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         obuf.as_mut_ptr() as *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m901\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         ::std::mem::size_of::<UChar>() as std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m902\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         5000 as std::os::raw::c_int as std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m903\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         zStream,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m904\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     ) as Int32;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m905\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     if ferror(zStream) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m906\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block = 5049394217699438129;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m907\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         break;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m908\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m909\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     if nread > 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m910\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         fwrite(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m911\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             obuf.as_mut_ptr() as *const std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m912\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             ::std::mem::size_of::<UChar>()\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m913\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 as std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m914\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             nread as std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m915\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             stream,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m916\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m917\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m918\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     if ferror(stream) != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m919\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block = 5049394217699438129;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m920\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         break;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m921\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m922\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m923\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m924\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 current_block = 673979509383251364;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m925\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m926\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m927\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         _ => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m928\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m929\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                     match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m930\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         5049394217699438129 => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m931\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                         _ => match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m932\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                             673979509383251364 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m933\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 BZ2_bzReadClose(&mut bzerr_dummy, bzf);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m934\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                 match bzerr {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m935\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     -9 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m936\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block = 3642457097893642164;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m937\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m938\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             6455255476181645667 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m939\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 panic(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m940\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     b\"decompress:unexpected error\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m941\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         as *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m942\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m943\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m944\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m945\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             3642457097893642164 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m946\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 configError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m947\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m948\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             10766414566319669440 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m949\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 crcError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m950\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m951\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             16178635849926953562 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m952\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 outOfMemory();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m953\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m954\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             5517467152645906530 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m955\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 compressedStreamEOF();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m956\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m957\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m958\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if zStream != __stdinp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m959\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m960\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m961\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if stream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m962\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m963\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m964\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if streamNo == 1 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m965\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 0 as std::os::raw::c_int as Bool;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m966\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m967\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if noisy != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m968\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m969\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m970\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 1 as std::os::raw::c_int as Bool;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m971\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m972\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m973\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m974\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m975\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     -6 => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m976\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                     -4 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m977\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block = 10766414566319669440;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m978\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m979\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             6455255476181645667 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m980\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 panic(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m981\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     b\"decompress:unexpected error\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m982\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         as *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m983\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m984\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m985\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m986\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             3642457097893642164 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m987\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 configError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m988\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m989\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             10766414566319669440 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m990\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 crcError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m991\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m992\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             16178635849926953562 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m993\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 outOfMemory();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m994\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m995\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             5517467152645906530 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m996\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 compressedStreamEOF();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m997\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m998\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m999\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if zStream != __stdinp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1000\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1001\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1002\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if stream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1003\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1004\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1005\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if streamNo == 1 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1006\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 0 as std::os::raw::c_int as Bool;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1007\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1008\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if noisy != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1009\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1010\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1011\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 1 as std::os::raw::c_int as Bool;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1012\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1013\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1014\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1015\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1016\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     -3 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1017\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block = 16178635849926953562;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1018\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1019\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             6455255476181645667 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1020\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 panic(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1021\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     b\"decompress:unexpected error\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1022\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         as *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1023\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1024\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1025\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1026\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             3642457097893642164 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1027\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 configError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1028\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1029\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             10766414566319669440 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1030\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 crcError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1031\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1032\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             16178635849926953562 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1033\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 outOfMemory();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1034\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1035\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             5517467152645906530 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1036\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 compressedStreamEOF();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1037\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1038\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1039\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if zStream != __stdinp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1040\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1041\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1042\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if stream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1043\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1044\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1045\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if streamNo == 1 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1046\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 0 as std::os::raw::c_int as Bool;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1047\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1048\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if noisy != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1049\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1050\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1051\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 1 as std::os::raw::c_int as Bool;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1052\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1053\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1054\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1055\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1056\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     -7 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1057\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block = 5517467152645906530;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1058\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1059\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             6455255476181645667 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1060\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 panic(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1061\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     b\"decompress:unexpected error\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1062\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         as *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1063\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1064\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1065\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1066\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             3642457097893642164 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1067\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 configError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1068\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1069\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             10766414566319669440 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1070\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 crcError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1071\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1072\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             16178635849926953562 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1073\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 outOfMemory();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1074\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1075\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             5517467152645906530 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1076\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 compressedStreamEOF();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1077\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1079\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if zStream != __stdinp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1081\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1082\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if stream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1083\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1084\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1085\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if streamNo == 1 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1086\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 0 as std::os::raw::c_int as Bool;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1087\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1088\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if noisy != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1089\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1090\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1091\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 1 as std::os::raw::c_int as Bool;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1092\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1093\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1094\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1095\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1096\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     -5 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1097\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block = 7372986856480808103;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1098\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1099\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             6455255476181645667 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 panic(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     b\"decompress:unexpected error\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         as *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             3642457097893642164 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1107\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 configError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1108\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             10766414566319669440 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 crcError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             16178635849926953562 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 outOfMemory();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             5517467152645906530 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 compressedStreamEOF();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if zStream != __stdinp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if stream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if streamNo == 1 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 0 as std::os::raw::c_int as Bool;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if noisy != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 1 as std::os::raw::c_int as Bool;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block = 6455255476181645667;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             6455255476181645667 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 panic(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     b\"decompress:unexpected error\\x00\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         as *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             3642457097893642164 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 configError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1148\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             10766414566319669440 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 crcError();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             16178635849926953562 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 outOfMemory();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             5517467152645906530 => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 compressedStreamEOF();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if zStream != __stdinp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if stream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if streamNo == 1 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 0 as std::os::raw::c_int as Bool;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if noisy != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         fprintf (__stderrp, b\"\\n%s: %s: trailing garbage after EOF ignored\\n\\x00\" as * const u8 as * const std :: os :: raw :: c_char, progName, inName.as_mut_ptr ());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     return 1 as std::os::raw::c_int as Bool;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1179\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 if !(ferror(zStream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1180\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     if stream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         let mut fd: Int32 = fileno(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1182\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         if fd < 0 as std::os::raw::c_int {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1183\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             current_block = 5049394217699438129;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1184\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1185\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             applySavedFileAttrToOutputFile(fd);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             current_block = 14832935472441733737;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         current_block = 14832935472441733737;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1191\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         5049394217699438129 => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1193\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             ret = fclose(zStream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             if !(ret == -(1 as std::os::raw::c_int)) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 if !(ferror(stream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     ret = fflush(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if !(ret != 0 as std::os::raw::c_int) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         if stream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             ret = fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             outputHandleJustInCase =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 0 as *mut FILE;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             if ret\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 == -(1 as std::os::raw::c_int)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     5049394217699438129;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     14775119014532381840;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1212\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 14775119014532381840;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             5049394217699438129 => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 outputHandleJustInCase =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1220\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     0 as *mut FILE;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 if verbosity\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     >= 2 as std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     fprintf (__stderrp, b\"\\n    \\x00\" as * const u8 as * const std :: os :: raw :: c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 return 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     as Bool;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1235\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1236\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1237\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                         },\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1239\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1240\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1241\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":57279,"byte_end":60326,"line_start":1196,"line_end":1233,"column_start":49,"column_end":50,"is_primary":true,"text":[{"text":"                                                if !(ret == -(1 as std::os::raw::c_int)) {","highlight_start":49,"highlight_end":91},{"text":"                                                    if !(ferror(stream) != 0) {","highlight_start":1,"highlight_end":80},{"text":"                                                        ret = fflush(stream);","highlight_start":1,"highlight_end":78},{"text":"                                                        if !(ret != 0 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":96},{"text":"                                                            if stream != __stdoutp {","highlight_start":1,"highlight_end":85},{"text":"                                                                ret = fclose(stream);","highlight_start":1,"highlight_end":86},{"text":"                                                                outputHandleJustInCase =","highlight_start":1,"highlight_end":89},{"text":"                                                                    0 as *mut FILE;","highlight_start":1,"highlight_end":84},{"text":"                                                                if ret","highlight_start":1,"highlight_end":71},{"text":"                                                                    == -(1 as std::os::raw::c_int)","highlight_start":1,"highlight_end":99},{"text":"                                                                {","highlight_start":1,"highlight_end":66},{"text":"                                                                    current_block =","highlight_start":1,"highlight_end":84},{"text":"                                                                        5049394217699438129;","highlight_start":1,"highlight_end":93},{"text":"                                                                } else {","highlight_start":1,"highlight_end":73},{"text":"                                                                    current_block =","highlight_start":1,"highlight_end":84},{"text":"                                                                        14775119014532381840;","highlight_start":1,"highlight_end":94},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                            } else {","highlight_start":1,"highlight_end":69},{"text":"                                                                current_block =","highlight_start":1,"highlight_end":80},{"text":"                                                                    14775119014532381840;","highlight_start":1,"highlight_end":90},{"text":"                                                            }","highlight_start":1,"highlight_end":62},{"text":"                                                            match current_block {","highlight_start":1,"highlight_end":82},{"text":"                                                                5049394217699438129 => {}","highlight_start":1,"highlight_end":90},{"text":"                                                                _ => {","highlight_start":1,"highlight_end":71},{"text":"                                                                    outputHandleJustInCase =","highlight_start":1,"highlight_end":93},{"text":"                                                                        0 as *mut FILE;","highlight_start":1,"highlight_end":88},{"text":"                                                                    if verbosity","highlight_start":1,"highlight_end":81},{"text":"                                                                        >= 2 as std::os::raw::c_int","highlight_start":1,"highlight_end":100},{"text":"                                                                    {","highlight_start":1,"highlight_end":70},{"text":"                                                                        fprintf (__stderrp, b\"\\n    \\x00\" as * const u8 as * const std :: os :: raw :: c_char);","highlight_start":1,"highlight_end":160},{"text":"                                                                    }","highlight_start":1,"highlight_end":70},{"text":"                                                                    return 1 as std::os::raw::c_int","highlight_start":1,"highlight_end":100},{"text":"                                                                        as Bool;","highlight_start":1,"highlight_end":81},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                            }","highlight_start":1,"highlight_end":62},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":57279,"byte_end":60326,"line_start":1196,"line_end":1233,"column_start":49,"column_end":50,"is_primary":true,"text":[{"text":"                                                if !(ret == -(1 as std::os::raw::c_int)) {","highlight_start":49,"highlight_end":91},{"text":"                                                    if !(ferror(stream) != 0) {","highlight_start":1,"highlight_end":80},{"text":"                                                        ret = fflush(stream);","highlight_start":1,"highlight_end":78},{"text":"                                                        if !(ret != 0 as std::os::raw::c_int) {","highlight_start":1,"highlight_end":96},{"text":"                                                            if stream != __stdoutp {","highlight_start":1,"highlight_end":85},{"text":"                                                                ret = fclose(stream);","highlight_start":1,"highlight_end":86},{"text":"                                                                outputHandleJustInCase =","highlight_start":1,"highlight_end":89},{"text":"                                                                    0 as *mut FILE;","highlight_start":1,"highlight_end":84},{"text":"                                                                if ret","highlight_start":1,"highlight_end":71},{"text":"                                                                    == -(1 as std::os::raw::c_int)","highlight_start":1,"highlight_end":99},{"text":"                                                                {","highlight_start":1,"highlight_end":66},{"text":"                                                                    current_block =","highlight_start":1,"highlight_end":84},{"text":"                                                                        5049394217699438129;","highlight_start":1,"highlight_end":93},{"text":"                                                                } else {","highlight_start":1,"highlight_end":73},{"text":"                                                                    current_block =","highlight_start":1,"highlight_end":84},{"text":"                                                                        14775119014532381840;","highlight_start":1,"highlight_end":94},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                            } else {","highlight_start":1,"highlight_end":69},{"text":"                                                                current_block =","highlight_start":1,"highlight_end":80},{"text":"                                                                    14775119014532381840;","highlight_start":1,"highlight_end":90},{"text":"                                                            }","highlight_start":1,"highlight_end":62},{"text":"                                                            match current_block {","highlight_start":1,"highlight_end":82},{"text":"                                                                5049394217699438129 => {}","highlight_start":1,"highlight_end":90},{"text":"                                                                _ => {","highlight_start":1,"highlight_end":71},{"text":"                                                                    outputHandleJustInCase =","highlight_start":1,"highlight_end":93},{"text":"                                                                        0 as *mut FILE;","highlight_start":1,"highlight_end":88},{"text":"                                                                    if verbosity","highlight_start":1,"highlight_end":81},{"text":"                                                                        >= 2 as std::os::raw::c_int","highlight_start":1,"highlight_end":100},{"text":"                                                                    {","highlight_start":1,"highlight_end":70},{"text":"                                                                        fprintf (__stderrp, b\"\\n    \\x00\" as * const u8 as * const std :: os :: raw :: c_char);","highlight_start":1,"highlight_end":160},{"text":"                                                                    }","highlight_start":1,"highlight_end":70},{"text":"                                                                    return 1 as std::os::raw::c_int","highlight_start":1,"highlight_end":100},{"text":"                                                                        as Bool;","highlight_start":1,"highlight_end":81},{"text":"                                                                }","highlight_start":1,"highlight_end":66},{"text":"                                                            }","highlight_start":1,"highlight_end":62},{"text":"                                                        }","highlight_start":1,"highlight_end":58},{"text":"                                                    }","highlight_start":1,"highlight_end":54},{"text":"                                                }","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":"if !(ret == -(1 as std::os::raw::c_int)) && !(ferror(stream) != 0) {\n                                                    ret = fflush(stream);\n                                                    if !(ret != 0 as std::os::raw::c_int) {\n                                                        if stream != __stdoutp {\n                                                            ret = fclose(stream);\n                                                            outputHandleJustInCase =\n                                                                0 as *mut FILE;\n                                                            if ret\n                                                                == -(1 as std::os::raw::c_int)\n                                                            {\n                                                                current_block =\n                                                                    5049394217699438129;\n                                                            } else {\n                                                                current_block =\n                                                                    14775119014532381840;\n                                                            }\n                                                        } else {\n                                                            current_block =\n                                                                14775119014532381840;\n                                                        }\n                                                        match current_block {\n                                                            5049394217699438129 => {}\n                                                            _ => {\n                                                                outputHandleJustInCase =\n                                                                    0 as *mut FILE;\n                                                                if verbosity\n                                                                    >= 2 as std::os::raw::c_int\n                                                                {\n                                                                    fprintf (__stderrp, b\"\\n    \\x00\" as * const u8 as * const std :: os :: raw :: c_char);\n                                                                }\n                                                                return 1 as std::os::raw::c_int\n                                                                    as Bool;\n                                                            }\n                                                        }\n                                                    }\n                                                }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:1196:49\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   if !(ret == -(1 as std::os::raw::c_int)) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       if !(ferror(stream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                           ret = fflush(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                           if !(ret != 0 as std::os::raw::c_int) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1232\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______________________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1196\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[38;5;10mif !(ret == -(1 as std::os::raw::c_int)) && !(ferror(stream) != 0) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1197\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     ret = fflush(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     if !(ret != 0 as std::os::raw::c_int) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         if stream != __stdoutp {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             ret = fclose(stream);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             outputHandleJustInCase =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 0 as *mut FILE;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1203\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             if ret\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1204\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 == -(1 as std::os::raw::c_int)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1205\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1206\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     5049394217699438129;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1209\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     14775119014532381840;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1212\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         } else {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1213\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             current_block =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1214\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 14775119014532381840;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         match current_block {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1217\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             5049394217699438129 => {}\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1218\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             _ => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1219\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 outputHandleJustInCase =\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1220\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     0 as *mut FILE;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 if verbosity\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1222\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     >= 2 as std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     fprintf (__stderrp, b\"\\n    \\x00\" as * const u8 as * const std :: os :: raw :: c_char);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1225\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1226\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                 return 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1227\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                                     as Bool;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                             }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1229\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                         }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1230\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                     }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                                                 }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"this `if` statement can be collapsed","code":{"code":"clippy::collapsible_if","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":121527,"byte_end":121934,"line_start":2748,"line_end":2759,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if cantGuess != 0 {","highlight_start":9,"highlight_end":28},{"text":"            if noisy != 0 {","highlight_start":1,"highlight_end":28},{"text":"                fprintf(","highlight_start":1,"highlight_end":25},{"text":"                    __stderrp,","highlight_start":1,"highlight_end":31},{"text":"                    b\"%s: Can\\'t guess original name for %s -- using %s\\n\\x00\" as *const u8","highlight_start":1,"highlight_end":92},{"text":"                        as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":56},{"text":"                    progName,","highlight_start":1,"highlight_end":30},{"text":"                    inName.as_mut_ptr(),","highlight_start":1,"highlight_end":41},{"text":"                    outName.as_mut_ptr(),","highlight_start":1,"highlight_end":42},{"text":"                );","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":121527,"byte_end":121934,"line_start":2748,"line_end":2759,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        if cantGuess != 0 {","highlight_start":9,"highlight_end":28},{"text":"            if noisy != 0 {","highlight_start":1,"highlight_end":28},{"text":"                fprintf(","highlight_start":1,"highlight_end":25},{"text":"                    __stderrp,","highlight_start":1,"highlight_end":31},{"text":"                    b\"%s: Can\\'t guess original name for %s -- using %s\\n\\x00\" as *const u8","highlight_start":1,"highlight_end":92},{"text":"                        as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":56},{"text":"                    progName,","highlight_start":1,"highlight_end":30},{"text":"                    inName.as_mut_ptr(),","highlight_start":1,"highlight_end":41},{"text":"                    outName.as_mut_ptr(),","highlight_start":1,"highlight_end":42},{"text":"                );","highlight_start":1,"highlight_end":19},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":"if cantGuess != 0 && noisy != 0 {\n            fprintf(\n                __stderrp,\n                b\"%s: Can\\'t guess original name for %s -- using %s\\n\\x00\" as *const u8\n                    as *const std::os::raw::c_char,\n                progName,\n                inName.as_mut_ptr(),\n                outName.as_mut_ptr(),\n            );\n        }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `if` statement can be collapsed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:2748:9\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2748\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if cantGuess != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2749\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            if noisy != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2750\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                fprintf(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2751\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    __stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2758\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2759\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2748\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[38;5;10mif cantGuess != 0 && noisy != 0 {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2749\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             fprintf(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2750\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 __stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2751\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 b\"%s: Can\\'t guess original name for %s -- using %s\\n\\x00\" as *const u8\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2752\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2753\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 progName,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2754\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 inName.as_mut_ptr(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2755\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 outName.as_mut_ptr(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2756\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2757\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+         }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"this `else { if .. }` block can be collapsed","code":{"code":"clippy::collapsible_else_if","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":153939,"byte_end":154585,"line_start":3556,"line_end":3572,"column_start":20,"column_end":14,"is_primary":true,"text":[{"text":"            } else {","highlight_start":20,"highlight_end":21},{"text":"                if strncmp(","highlight_start":1,"highlight_end":28},{"text":"                    (*aa).name,","highlight_start":1,"highlight_end":32},{"text":"                    b\"--\\x00\" as *const u8 as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":75},{"text":"                    2 as std::os::raw::c_int as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":71},{"text":"                ) == 0 as std::os::raw::c_int","highlight_start":1,"highlight_end":46},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    fprintf(","highlight_start":1,"highlight_end":29},{"text":"                        __stderrp,","highlight_start":1,"highlight_end":35},{"text":"                        b\"%s: Bad flag `%s\\'\\n\\x00\" as *const u8 as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":97},{"text":"                        progName,","highlight_start":1,"highlight_end":34},{"text":"                        (*aa).name,","highlight_start":1,"highlight_end":36},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                    usage(progName);","highlight_start":1,"highlight_end":37},{"text":"                    exit(1 as std::os::raw::c_int);","highlight_start":1,"highlight_end":52},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(clippy::collapsible_else_if)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"collapse nested if block","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":153939,"byte_end":154585,"line_start":3556,"line_end":3572,"column_start":20,"column_end":14,"is_primary":true,"text":[{"text":"            } else {","highlight_start":20,"highlight_end":21},{"text":"                if strncmp(","highlight_start":1,"highlight_end":28},{"text":"                    (*aa).name,","highlight_start":1,"highlight_end":32},{"text":"                    b\"--\\x00\" as *const u8 as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":75},{"text":"                    2 as std::os::raw::c_int as std::os::raw::c_ulong,","highlight_start":1,"highlight_end":71},{"text":"                ) == 0 as std::os::raw::c_int","highlight_start":1,"highlight_end":46},{"text":"                {","highlight_start":1,"highlight_end":18},{"text":"                    fprintf(","highlight_start":1,"highlight_end":29},{"text":"                        __stderrp,","highlight_start":1,"highlight_end":35},{"text":"                        b\"%s: Bad flag `%s\\'\\n\\x00\" as *const u8 as *const std::os::raw::c_char,","highlight_start":1,"highlight_end":97},{"text":"                        progName,","highlight_start":1,"highlight_end":34},{"text":"                        (*aa).name,","highlight_start":1,"highlight_end":36},{"text":"                    );","highlight_start":1,"highlight_end":23},{"text":"                    usage(progName);","highlight_start":1,"highlight_end":37},{"text":"                    exit(1 as std::os::raw::c_int);","highlight_start":1,"highlight_end":52},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14}],"label":null,"suggested_replacement":"if strncmp(\n                (*aa).name,\n                b\"--\\x00\" as *const u8 as *const std::os::raw::c_char,\n                2 as std::os::raw::c_int as std::os::raw::c_ulong,\n            ) == 0 as std::os::raw::c_int\n            {\n                fprintf(\n                    __stderrp,\n                    b\"%s: Bad flag `%s\\'\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\n                    progName,\n                    (*aa).name,\n                );\n                usage(progName);\n                exit(1 as std::os::raw::c_int);\n            }","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: this `else { if .. }` block can be collapsed\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:3556:20\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3556\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            } else {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m____________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3557\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if strncmp(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    (*aa).name,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3559\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    b\"--\\x00\" as *const u8 as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3571\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3572\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(clippy::collapsible_else_if)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: collapse nested if block\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3556\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m            } else \u001b[0m\u001b[0m\u001b[38;5;10mif strncmp(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3557\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 (*aa).name,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 b\"--\\x00\" as *const u8 as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3559\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 2 as std::os::raw::c_int as std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3560\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             ) == 0 as std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3561\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3562\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 fprintf(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3563\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     __stderrp,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3564\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     b\"%s: Bad flag `%s\\'\\n\\x00\" as *const u8 as *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3565\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     progName,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3566\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                     (*aa).name,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3567\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 );\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3568\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 usage(progName);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3569\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+                 exit(1 as std::os::raw::c_int);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3570\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+             }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":57617,"byte_end":57652,"line_start":1362,"line_end":1362,"column_start":19,"column_end":54,"is_primary":true,"text":[{"text":"            mid = nb + na >> 1 as std::os::raw::c_int;","highlight_start":19,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":57617,"byte_end":57652,"line_start":1362,"line_end":1362,"column_start":19,"column_end":54,"is_primary":true,"text":[{"text":"            mid = nb + na >> 1 as std::os::raw::c_int;","highlight_start":19,"highlight_end":54}],"label":null,"suggested_replacement":"(nb + na) >> 1 as std::os::raw::c_int","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:1362:19\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1362\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            mid = nb + na >> 1 as std::os::raw::c_int;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(nb + na) >> 1 as std::os::raw::c_int`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"compress.rs","byte_start":5321,"byte_end":5369,"line_start":170,"line_end":170,"column_start":24,"column_end":72,"is_primary":true,"text":[{"text":"        (*s).bsBuff |= v << 32 as std::os::raw::c_int - (*s).bsLive - n;","highlight_start":24,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"compress.rs","byte_start":5321,"byte_end":5369,"line_start":170,"line_end":170,"column_start":24,"column_end":72,"is_primary":true,"text":[{"text":"        (*s).bsBuff |= v << 32 as std::os::raw::c_int - (*s).bsLive - n;","highlight_start":24,"highlight_end":72}],"label":null,"suggested_replacement":"v << (32 as std::os::raw::c_int - (*s).bsLive - n)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcompress.rs:170:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        (*s).bsBuff |= v << 32 as std::os::raw::c_int - (*s).bsLive - n;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `v << (32 as std::os::raw::c_int - (*s).bsLive - n)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":9351,"byte_end":9404,"line_start":282,"line_end":282,"column_start":29,"column_end":82,"is_primary":true,"text":[{"text":"                        v = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":29,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":9351,"byte_end":9404,"line_start":282,"line_end":282,"column_start":29,"column_end":82,"is_primary":true,"text":[{"text":"                        v = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":29,"highlight_end":82}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:282:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":15820,"byte_end":15873,"line_start":462,"line_end":462,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_0 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":15820,"byte_end":15873,"line_start":462,"line_end":462,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_0 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:462:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m462\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_0 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":18432,"byte_end":18485,"line_start":514,"line_end":514,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_1 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":18432,"byte_end":18485,"line_start":514,"line_end":514,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_1 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:514:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m514\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_1 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":21044,"byte_end":21097,"line_start":566,"line_end":566,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_2 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":21044,"byte_end":21097,"line_start":566,"line_end":566,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_2 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:566:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m566\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_2 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":24195,"byte_end":24380,"line_start":618,"line_end":620,"column_start":39,"column_end":68,"is_primary":true,"text":[{"text":"                                    ((1 as std::os::raw::c_int","highlight_start":39,"highlight_end":63},{"text":"                                        + (*s).blockSize100k * 100000 as std::os::raw::c_int","highlight_start":1,"highlight_end":93},{"text":"                                        >> 1 as std::os::raw::c_int)","highlight_start":1,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":24195,"byte_end":24380,"line_start":618,"line_end":620,"column_start":39,"column_end":68,"is_primary":true,"text":[{"text":"                                    ((1 as std::os::raw::c_int","highlight_start":39,"highlight_end":63},{"text":"                                        + (*s).blockSize100k * 100000 as std::os::raw::c_int","highlight_start":1,"highlight_end":93},{"text":"                                        >> 1 as std::os::raw::c_int)","highlight_start":1,"highlight_end":68}],"label":null,"suggested_replacement":"(1 as std::os::raw::c_int\n                                        + (*s).blockSize100k * 100000 as std::os::raw::c_int) >> 1 as std::os::raw::c_int","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:618:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   ((1 as std::os::raw::c_int\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m619\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       + (*s).blockSize100k * 100000 as std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m620\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                       >> 1 as std::os::raw::c_int)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_____________________________________________________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider parenthesizing your expression\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m618\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~ \u001b[0m\u001b[0m                                    ((\u001b[0m\u001b[0m\u001b[38;5;10m(1 as std::os::raw::c_int\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m619\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m~                                         + (*s).blockSize100k * 100000 as std::os::raw::c_int) >> 1 as std::os::raw::c_int\u001b[0m\u001b[0m)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":26869,"byte_end":26922,"line_start":668,"line_end":668,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_3 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":26869,"byte_end":26922,"line_start":668,"line_end":668,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_3 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:668:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m668\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_3 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":29642,"byte_end":29695,"line_start":722,"line_end":722,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_32 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":29642,"byte_end":29695,"line_start":722,"line_end":722,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_32 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:722:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_32 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":32194,"byte_end":32247,"line_start":771,"line_end":771,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_4 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":32194,"byte_end":32247,"line_start":771,"line_end":771,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_4 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:771:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m771\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_4 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":34807,"byte_end":34860,"line_start":823,"line_end":823,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_33 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":34807,"byte_end":34860,"line_start":823,"line_end":823,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_33 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:823:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m823\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_33 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":37360,"byte_end":37413,"line_start":872,"line_end":872,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_5 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":37360,"byte_end":37413,"line_start":872,"line_end":872,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_5 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:872:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m872\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_5 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":39972,"byte_end":40025,"line_start":924,"line_end":924,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_34 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":39972,"byte_end":40025,"line_start":924,"line_end":924,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_34 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:924:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m924\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_34 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":42523,"byte_end":42576,"line_start":973,"line_end":973,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_6 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":42523,"byte_end":42576,"line_start":973,"line_end":973,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_6 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:973:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m973\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_6 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":45135,"byte_end":45188,"line_start":1025,"line_end":1025,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_35 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":45135,"byte_end":45188,"line_start":1025,"line_end":1025,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_35 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1025:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1025\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_35 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":47686,"byte_end":47739,"line_start":1074,"line_end":1074,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_7 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":47686,"byte_end":47739,"line_start":1074,"line_end":1074,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_7 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1074:31\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1074\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_7 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":50298,"byte_end":50351,"line_start":1126,"line_end":1126,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_36 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":50298,"byte_end":50351,"line_start":1126,"line_end":1126,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_36 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1126:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_36 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":52936,"byte_end":52989,"line_start":1176,"line_end":1176,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_8 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":52936,"byte_end":52989,"line_start":1176,"line_end":1176,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_8 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1176:31\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_8 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":56118,"byte_end":56171,"line_start":1238,"line_end":1238,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_37 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":56118,"byte_end":56171,"line_start":1238,"line_end":1238,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_37 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1238:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_37 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":58533,"byte_end":58586,"line_start":1284,"line_end":1284,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_9 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":58533,"byte_end":58586,"line_start":1284,"line_end":1284,"column_start":31,"column_end":84,"is_primary":true,"text":[{"text":"                        v_9 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":31,"highlight_end":84}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1284:31\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_9 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":61001,"byte_end":61054,"line_start":1333,"line_end":1333,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_38 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":61001,"byte_end":61054,"line_start":1333,"line_end":1333,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_38 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1333:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_38 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":63417,"byte_end":63470,"line_start":1379,"line_end":1379,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_10 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":63417,"byte_end":63470,"line_start":1379,"line_end":1379,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_10 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1379:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1379\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_10 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":65888,"byte_end":65941,"line_start":1428,"line_end":1428,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_39 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":65888,"byte_end":65941,"line_start":1428,"line_end":1428,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_39 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1428:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1428\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_39 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":68306,"byte_end":68359,"line_start":1474,"line_end":1474,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_11 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":68306,"byte_end":68359,"line_start":1474,"line_end":1474,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_11 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1474:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1474\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_11 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":70779,"byte_end":70832,"line_start":1523,"line_end":1523,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_12 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":70779,"byte_end":70832,"line_start":1523,"line_end":1523,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_12 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1523:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1523\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_12 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":73191,"byte_end":73244,"line_start":1569,"line_end":1569,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_40 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":73191,"byte_end":73244,"line_start":1569,"line_end":1569,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_40 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1569:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1569\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_40 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":75791,"byte_end":75844,"line_start":1620,"line_end":1620,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_13 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":75791,"byte_end":75844,"line_start":1620,"line_end":1620,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_13 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1620:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1620\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_13 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":78203,"byte_end":78256,"line_start":1668,"line_end":1668,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_14 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":78203,"byte_end":78256,"line_start":1668,"line_end":1668,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_14 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1668:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1668\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_14 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":80627,"byte_end":80680,"line_start":1716,"line_end":1716,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_15 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":80627,"byte_end":80680,"line_start":1716,"line_end":1716,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_15 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1716:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1716\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_15 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":83050,"byte_end":83103,"line_start":1764,"line_end":1764,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_16 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":83050,"byte_end":83103,"line_start":1764,"line_end":1764,"column_start":32,"column_end":85,"is_primary":true,"text":[{"text":"                        v_16 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int","highlight_start":32,"highlight_end":85}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1764:32\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1764\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                        v_16 = (*s).bsBuff >> (*s).bsLive - 8 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 8 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":86160,"byte_end":86191,"line_start":1825,"line_end":1825,"column_start":36,"column_end":67,"is_primary":true,"text":[{"text":"                            v_30 = (*s).bsBuff >> (*s).bsLive - zn","highlight_start":36,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":86160,"byte_end":86191,"line_start":1825,"line_end":1825,"column_start":36,"column_end":67,"is_primary":true,"text":[{"text":"                            v_30 = (*s).bsBuff >> (*s).bsLive - zn","highlight_start":36,"highlight_end":67}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - zn)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1825:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1825\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   v_30 = (*s).bsBuff >> (*s).bsLive - zn\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - zn)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":88154,"byte_end":88207,"line_start":1859,"line_end":1859,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_29 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":88154,"byte_end":88207,"line_start":1859,"line_end":1859,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_29 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1859:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1859\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   v_29 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":90292,"byte_end":90323,"line_start":1895,"line_end":1895,"column_start":36,"column_end":67,"is_primary":true,"text":[{"text":"                            v_28 = (*s).bsBuff >> (*s).bsLive - zn","highlight_start":36,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":90292,"byte_end":90323,"line_start":1895,"line_end":1895,"column_start":36,"column_end":67,"is_primary":true,"text":[{"text":"                            v_28 = (*s).bsBuff >> (*s).bsLive - zn","highlight_start":36,"highlight_end":67}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - zn)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1895:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1895\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   v_28 = (*s).bsBuff >> (*s).bsLive - zn\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - zn)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":92287,"byte_end":92340,"line_start":1929,"line_end":1929,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_27 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":92287,"byte_end":92340,"line_start":1929,"line_end":1929,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_27 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1929:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1929\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   v_27 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":94425,"byte_end":94456,"line_start":1965,"line_end":1965,"column_start":36,"column_end":67,"is_primary":true,"text":[{"text":"                            v_26 = (*s).bsBuff >> (*s).bsLive - zn","highlight_start":36,"highlight_end":67}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":94425,"byte_end":94456,"line_start":1965,"line_end":1965,"column_start":36,"column_end":67,"is_primary":true,"text":[{"text":"                            v_26 = (*s).bsBuff >> (*s).bsLive - zn","highlight_start":36,"highlight_end":67}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - zn)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1965:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1965\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   v_26 = (*s).bsBuff >> (*s).bsLive - zn\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - zn)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":96418,"byte_end":96471,"line_start":1999,"line_end":1999,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_25 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":96418,"byte_end":96471,"line_start":1999,"line_end":1999,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_25 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:1999:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1999\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   v_25 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":98710,"byte_end":98763,"line_start":2039,"line_end":2039,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_24 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":98710,"byte_end":98763,"line_start":2039,"line_end":2039,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_24 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:2039:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2039\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   v_24 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":101004,"byte_end":101057,"line_start":2078,"line_end":2078,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_23 = (*s).bsBuff >> (*s).bsLive - 5 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":101004,"byte_end":101057,"line_start":2078,"line_end":2078,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_23 = (*s).bsBuff >> (*s).bsLive - 5 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 5 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:2078:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   v_23 = (*s).bsBuff >> (*s).bsLive - 5 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 5 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":103149,"byte_end":103202,"line_start":2114,"line_end":2114,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_21 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":103149,"byte_end":103202,"line_start":2114,"line_end":2114,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_21 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:2114:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   v_21 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":105745,"byte_end":105799,"line_start":2160,"line_end":2160,"column_start":36,"column_end":90,"is_primary":true,"text":[{"text":"                            v_20 = (*s).bsBuff >> (*s).bsLive - 15 as std::os::raw::c_int","highlight_start":36,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":105745,"byte_end":105799,"line_start":2160,"line_end":2160,"column_start":36,"column_end":90,"is_primary":true,"text":[{"text":"                            v_20 = (*s).bsBuff >> (*s).bsLive - 15 as std::os::raw::c_int","highlight_start":36,"highlight_end":90}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 15 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:2160:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   v_20 = (*s).bsBuff >> (*s).bsLive - 15 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 15 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":108174,"byte_end":108227,"line_start":2202,"line_end":2202,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_19 = (*s).bsBuff >> (*s).bsLive - 3 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":108174,"byte_end":108227,"line_start":2202,"line_end":2202,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_19 = (*s).bsBuff >> (*s).bsLive - 3 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 3 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:2202:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   v_19 = (*s).bsBuff >> (*s).bsLive - 3 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 3 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":110579,"byte_end":110632,"line_start":2243,"line_end":2243,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_18 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":110579,"byte_end":110632,"line_start":2243,"line_end":2243,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_18 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:2243:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   v_18 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":113531,"byte_end":113584,"line_start":2296,"line_end":2296,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_17 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":113531,"byte_end":113584,"line_start":2296,"line_end":2296,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_17 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:2296:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2296\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   v_17 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"operator precedence can trip the unwary","code":{"code":"clippy::precedence","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":115963,"byte_end":116016,"line_start":2338,"line_end":2338,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_31 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"consider parenthesizing your expression","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":115963,"byte_end":116016,"line_start":2338,"line_end":2338,"column_start":36,"column_end":89,"is_primary":true,"text":[{"text":"                            v_31 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int","highlight_start":36,"highlight_end":89}],"label":null,"suggested_replacement":"(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: operator precedence can trip the unwary\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:2338:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2338\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m                   v_31 = (*s).bsBuff >> (*s).bsLive - 1 as std::os::raw::c_int\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: consider parenthesizing your expression: `(*s).bsBuff >> ((*s).bsLive - 1 as std::os::raw::c_int)`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":57,"byte_end":112,"line_start":4,"line_end":4,"column_start":5,"column_end":60,"is_primary":false,"text":[{"text":"    fn BZ2_bz__AssertH__fail(errcode: std::os::raw::c_int);","highlight_start":5,"highlight_end":60}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"blocksort.rs","byte_start":40,"byte_end":52,"line_start":3,"line_end":3,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_attributes)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":40,"byte_end":52,"line_start":3,"line_end":3,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bz__AssertH__fail(errcode: std::os::raw::c_int);\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_attributes)]` on by default\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":134,"byte_end":166,"line_start":6,"line_end":6,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    static mut __stderrp: *mut FILE;","highlight_start":5,"highlight_end":37}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"blocksort.rs","byte_start":117,"byte_end":129,"line_start":5,"line_end":5,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":117,"byte_end":129,"line_start":5,"line_end":5,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stderrp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"blocksort.rs","byte_start":188,"byte_end":276,"line_start":8,"line_end":8,"column_start":5,"column_end":93,"is_primary":false,"text":[{"text":"    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":93}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"blocksort.rs","byte_start":171,"byte_end":183,"line_start":7,"line_end":7,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"blocksort.rs","byte_start":171,"byte_end":183,"line_start":7,"line_end":7,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mblocksort.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":57,"byte_end":88,"line_start":4,"line_end":4,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    static mut __stdinp: *mut FILE;","highlight_start":5,"highlight_end":36}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":40,"byte_end":52,"line_start":3,"line_end":3,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":40,"byte_end":52,"line_start":3,"line_end":3,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stdinp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":110,"byte_end":142,"line_start":6,"line_end":6,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    static mut __stdoutp: *mut FILE;","highlight_start":5,"highlight_end":37}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":93,"byte_end":105,"line_start":5,"line_end":5,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":93,"byte_end":105,"line_start":5,"line_end":5,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stdoutp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":164,"byte_end":196,"line_start":8,"line_end":8,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    static mut __stderrp: *mut FILE;","highlight_start":5,"highlight_end":37}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":147,"byte_end":159,"line_start":7,"line_end":7,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":147,"byte_end":159,"line_start":7,"line_end":7,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stderrp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":218,"byte_end":265,"line_start":10,"line_end":10,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn fclose(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":201,"byte_end":213,"line_start":9,"line_end":9,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":201,"byte_end":213,"line_start":9,"line_end":9,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:9:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fclose(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":287,"byte_end":334,"line_start":12,"line_end":12,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn ferror(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":270,"byte_end":282,"line_start":11,"line_end":11,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":270,"byte_end":282,"line_start":11,"line_end":11,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn ferror(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":356,"byte_end":403,"line_start":14,"line_end":14,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn fflush(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":339,"byte_end":351,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":339,"byte_end":351,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fflush(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":425,"byte_end":471,"line_start":16,"line_end":16,"column_start":5,"column_end":51,"is_primary":false,"text":[{"text":"    fn fgetc(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":51}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":408,"byte_end":420,"line_start":15,"line_end":15,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":408,"byte_end":420,"line_start":15,"line_end":15,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:15:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fgetc(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":493,"byte_end":579,"line_start":18,"line_end":18,"column_start":5,"column_end":91,"is_primary":false,"text":[{"text":"    fn fopen(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> *mut FILE;","highlight_start":5,"highlight_end":91}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":476,"byte_end":488,"line_start":17,"line_end":17,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":476,"byte_end":488,"line_start":17,"line_end":17,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:17:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fopen(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> *mut FILE;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":601,"byte_end":689,"line_start":20,"line_end":20,"column_start":5,"column_end":93,"is_primary":false,"text":[{"text":"    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":93}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":584,"byte_end":596,"line_start":19,"line_end":19,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":584,"byte_end":596,"line_start":19,"line_end":19,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:19:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":711,"byte_end":880,"line_start":22,"line_end":27,"column_start":5,"column_end":32,"is_primary":false,"text":[{"text":"    fn fread(","highlight_start":5,"highlight_end":14},{"text":"        _: *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":38},{"text":"        _: std::os::raw::c_ulong,","highlight_start":1,"highlight_end":34},{"text":"        _: std::os::raw::c_ulong,","highlight_start":1,"highlight_end":34},{"text":"        _: *mut FILE,","highlight_start":1,"highlight_end":22},{"text":"    ) -> std::os::raw::c_ulong;","highlight_start":1,"highlight_end":32}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":694,"byte_end":706,"line_start":21,"line_end":21,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":694,"byte_end":706,"line_start":21,"line_end":21,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:21:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fread(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut FILE,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> std::os::raw::c_ulong;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_______________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":902,"byte_end":1074,"line_start":29,"line_end":34,"column_start":5,"column_end":32,"is_primary":false,"text":[{"text":"    fn fwrite(","highlight_start":5,"highlight_end":15},{"text":"        _: *const std::os::raw::c_void,","highlight_start":1,"highlight_end":40},{"text":"        _: std::os::raw::c_ulong,","highlight_start":1,"highlight_end":34},{"text":"        _: std::os::raw::c_ulong,","highlight_start":1,"highlight_end":34},{"text":"        _: *mut FILE,","highlight_start":1,"highlight_end":22},{"text":"    ) -> std::os::raw::c_ulong;","highlight_start":1,"highlight_end":32}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":885,"byte_end":897,"line_start":28,"line_end":28,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":885,"byte_end":897,"line_start":28,"line_end":28,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:28:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fwrite(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut FILE,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> std::os::raw::c_ulong;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_______________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1096,"byte_end":1138,"line_start":36,"line_end":36,"column_start":5,"column_end":47,"is_primary":false,"text":[{"text":"    fn perror(_: *const std::os::raw::c_char);","highlight_start":5,"highlight_end":47}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1079,"byte_end":1091,"line_start":35,"line_end":35,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1079,"byte_end":1091,"line_start":35,"line_end":35,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:35:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn perror(_: *const std::os::raw::c_char);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1160,"byte_end":1225,"line_start":38,"line_end":38,"column_start":5,"column_end":70,"is_primary":false,"text":[{"text":"    fn remove(_: *const std::os::raw::c_char) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":70}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1143,"byte_end":1155,"line_start":37,"line_end":37,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1143,"byte_end":1155,"line_start":37,"line_end":37,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:37:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn remove(_: *const std::os::raw::c_char) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1247,"byte_end":1271,"line_start":40,"line_end":40,"column_start":5,"column_end":29,"is_primary":false,"text":[{"text":"    fn rewind(_: *mut FILE);","highlight_start":5,"highlight_end":29}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1230,"byte_end":1242,"line_start":39,"line_end":39,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1230,"byte_end":1242,"line_start":39,"line_end":39,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:39:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn rewind(_: *mut FILE);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1293,"byte_end":1364,"line_start":42,"line_end":42,"column_start":5,"column_end":76,"is_primary":false,"text":[{"text":"    fn ungetc(_: std::os::raw::c_int, _: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":76}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1276,"byte_end":1288,"line_start":41,"line_end":41,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1276,"byte_end":1288,"line_start":41,"line_end":41,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:41:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn ungetc(_: std::os::raw::c_int, _: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1386,"byte_end":1465,"line_start":44,"line_end":44,"column_start":5,"column_end":84,"is_primary":false,"text":[{"text":"    fn fdopen(_: std::os::raw::c_int, _: *const std::os::raw::c_char) -> *mut FILE;","highlight_start":5,"highlight_end":84}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1369,"byte_end":1381,"line_start":43,"line_end":43,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1369,"byte_end":1381,"line_start":43,"line_end":43,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:43:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fdopen(_: std::os::raw::c_int, _: *const std::os::raw::c_char) -> *mut FILE;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1487,"byte_end":1534,"line_start":46,"line_end":46,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn fileno(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1470,"byte_end":1482,"line_start":45,"line_end":45,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1470,"byte_end":1482,"line_start":45,"line_end":45,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:45:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fileno(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1556,"byte_end":1593,"line_start":48,"line_end":48,"column_start":5,"column_end":42,"is_primary":false,"text":[{"text":"    fn exit(_: std::os::raw::c_int) -> !;","highlight_start":5,"highlight_end":42}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1539,"byte_end":1551,"line_start":47,"line_end":47,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1539,"byte_end":1551,"line_start":47,"line_end":47,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:47:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn exit(_: std::os::raw::c_int) -> !;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1615,"byte_end":1686,"line_start":50,"line_end":50,"column_start":5,"column_end":76,"is_primary":false,"text":[{"text":"    fn getenv(_: *const std::os::raw::c_char) -> *mut std::os::raw::c_char;","highlight_start":5,"highlight_end":76}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1598,"byte_end":1610,"line_start":49,"line_end":49,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1598,"byte_end":1610,"line_start":49,"line_end":49,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:49:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn getenv(_: *const std::os::raw::c_char) -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1708,"byte_end":1773,"line_start":52,"line_end":52,"column_start":5,"column_end":70,"is_primary":false,"text":[{"text":"    fn malloc(_: std::os::raw::c_ulong) -> *mut std::os::raw::c_void;","highlight_start":5,"highlight_end":70}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1691,"byte_end":1703,"line_start":51,"line_end":51,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1691,"byte_end":1703,"line_start":51,"line_end":51,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:51:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn malloc(_: std::os::raw::c_ulong) -> *mut std::os::raw::c_void;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1795,"byte_end":1833,"line_start":54,"line_end":54,"column_start":5,"column_end":43,"is_primary":false,"text":[{"text":"    fn free(_: *mut std::os::raw::c_void);","highlight_start":5,"highlight_end":43}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1778,"byte_end":1790,"line_start":53,"line_end":53,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1778,"byte_end":1790,"line_start":53,"line_end":53,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:53:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn free(_: *mut std::os::raw::c_void);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":1855,"byte_end":2037,"line_start":56,"line_end":59,"column_start":5,"column_end":69,"is_primary":false,"text":[{"text":"    fn signal(","highlight_start":5,"highlight_end":15},{"text":"        _: std::os::raw::c_int,","highlight_start":1,"highlight_end":32},{"text":"        _: Option<unsafe extern \"C\" fn(_: std::os::raw::c_int) -> ()>,","highlight_start":1,"highlight_end":71},{"text":"    ) -> Option<unsafe extern \"C\" fn(_: std::os::raw::c_int) -> ()>;","highlight_start":1,"highlight_end":69}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":1838,"byte_end":1850,"line_start":55,"line_end":55,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":1838,"byte_end":1850,"line_start":55,"line_end":55,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:55:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn signal(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: Option<unsafe extern \"C\" fn(_: std::os::raw::c_int) -> ()>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Option<unsafe extern \"C\" fn(_: std::os::raw::c_int) -> ()>;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|____________________________________________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":2059,"byte_end":2179,"line_start":61,"line_end":64,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    fn strcmp(","highlight_start":5,"highlight_end":15},{"text":"        _: *const std::os::raw::c_char,","highlight_start":1,"highlight_end":40},{"text":"        _: *const std::os::raw::c_char,","highlight_start":1,"highlight_end":40},{"text":"    ) -> std::os::raw::c_int;","highlight_start":1,"highlight_end":30}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":2042,"byte_end":2054,"line_start":60,"line_end":60,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":2042,"byte_end":2054,"line_start":60,"line_end":60,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:60:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strcmp(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":2201,"byte_end":2325,"line_start":66,"line_end":69,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    fn strcpy(","highlight_start":5,"highlight_end":15},{"text":"        _: *mut std::os::raw::c_char,","highlight_start":1,"highlight_end":38},{"text":"        _: *const std::os::raw::c_char,","highlight_start":1,"highlight_end":40},{"text":"    ) -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":36}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":2184,"byte_end":2196,"line_start":65,"line_end":65,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":2184,"byte_end":2196,"line_start":65,"line_end":65,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:65:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strcpy(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":2347,"byte_end":2412,"line_start":71,"line_end":71,"column_start":5,"column_end":70,"is_primary":false,"text":[{"text":"    fn strerror(_: std::os::raw::c_int) -> *mut std::os::raw::c_char;","highlight_start":5,"highlight_end":70}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":2330,"byte_end":2342,"line_start":70,"line_end":70,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":2330,"byte_end":2342,"line_start":70,"line_end":70,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:70:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strerror(_: std::os::raw::c_int) -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":2434,"byte_end":2501,"line_start":73,"line_end":73,"column_start":5,"column_end":72,"is_primary":false,"text":[{"text":"    fn strlen(_: *const std::os::raw::c_char) -> std::os::raw::c_ulong;","highlight_start":5,"highlight_end":72}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":2417,"byte_end":2429,"line_start":72,"line_end":72,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":2417,"byte_end":2429,"line_start":72,"line_end":72,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:72:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strlen(_: *const std::os::raw::c_char) -> std::os::raw::c_ulong;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":2523,"byte_end":2678,"line_start":75,"line_end":79,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    fn strncmp(","highlight_start":5,"highlight_end":16},{"text":"        _: *const std::os::raw::c_char,","highlight_start":1,"highlight_end":40},{"text":"        _: *const std::os::raw::c_char,","highlight_start":1,"highlight_end":40},{"text":"        _: std::os::raw::c_ulong,","highlight_start":1,"highlight_end":34},{"text":"    ) -> std::os::raw::c_int;","highlight_start":1,"highlight_end":30}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":2506,"byte_end":2518,"line_start":74,"line_end":74,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":2506,"byte_end":2518,"line_start":74,"line_end":74,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:74:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strncmp(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":2700,"byte_end":2859,"line_start":81,"line_end":85,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    fn strncpy(","highlight_start":5,"highlight_end":16},{"text":"        _: *mut std::os::raw::c_char,","highlight_start":1,"highlight_end":38},{"text":"        _: *const std::os::raw::c_char,","highlight_start":1,"highlight_end":40},{"text":"        _: std::os::raw::c_ulong,","highlight_start":1,"highlight_end":34},{"text":"    ) -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":36}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":2683,"byte_end":2695,"line_start":80,"line_end":80,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":2683,"byte_end":2695,"line_start":80,"line_end":80,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:80:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strncpy(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m84\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":2881,"byte_end":3007,"line_start":87,"line_end":90,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    fn strstr(","highlight_start":5,"highlight_end":15},{"text":"        _: *const std::os::raw::c_char,","highlight_start":1,"highlight_end":40},{"text":"        _: *const std::os::raw::c_char,","highlight_start":1,"highlight_end":40},{"text":"    ) -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":36}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":2864,"byte_end":2876,"line_start":86,"line_end":86,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":2864,"byte_end":2876,"line_start":86,"line_end":86,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:86:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strstr(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":3029,"byte_end":3153,"line_start":92,"line_end":95,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    fn strcat(","highlight_start":5,"highlight_end":15},{"text":"        _: *mut std::os::raw::c_char,","highlight_start":1,"highlight_end":38},{"text":"        _: *const std::os::raw::c_char,","highlight_start":1,"highlight_end":40},{"text":"    ) -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":36}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":3012,"byte_end":3024,"line_start":91,"line_end":91,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":3012,"byte_end":3024,"line_start":91,"line_end":91,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:91:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strcat(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":3175,"byte_end":3216,"line_start":97,"line_end":97,"column_start":5,"column_end":46,"is_primary":false,"text":[{"text":"    fn __error() -> *mut std::os::raw::c_int;","highlight_start":5,"highlight_end":46}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":3158,"byte_end":3170,"line_start":96,"line_end":96,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":3158,"byte_end":3170,"line_start":96,"line_end":96,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:96:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m97\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn __error() -> *mut std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":3238,"byte_end":3324,"line_start":99,"line_end":99,"column_start":5,"column_end":91,"is_primary":false,"text":[{"text":"    fn __maskrune(_: __darwin_ct_rune_t, _: std::os::raw::c_ulong) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":91}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":3221,"byte_end":3233,"line_start":98,"line_end":98,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":3221,"byte_end":3233,"line_start":98,"line_end":98,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:98:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m98\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn __maskrune(_: __darwin_ct_rune_t, _: std::os::raw::c_ulong) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":3346,"byte_end":3389,"line_start":101,"line_end":101,"column_start":5,"column_end":48,"is_primary":false,"text":[{"text":"    static mut _DefaultRuneLocale: _RuneLocale;","highlight_start":5,"highlight_end":48}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":3329,"byte_end":3341,"line_start":100,"line_end":100,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":3329,"byte_end":3341,"line_start":100,"line_end":100,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:100:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut _DefaultRuneLocale: _RuneLocale;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":3411,"byte_end":3689,"line_start":103,"line_end":110,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    fn BZ2_bzReadOpen(","highlight_start":5,"highlight_end":23},{"text":"        bzerror: *mut std::os::raw::c_int,","highlight_start":1,"highlight_end":43},{"text":"        f: *mut FILE,","highlight_start":1,"highlight_end":22},{"text":"        verbosity_0: std::os::raw::c_int,","highlight_start":1,"highlight_end":42},{"text":"        small: std::os::raw::c_int,","highlight_start":1,"highlight_end":36},{"text":"        unused: *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":43},{"text":"        nUnused: std::os::raw::c_int,","highlight_start":1,"highlight_end":38},{"text":"    ) -> *mut std::os::raw::c_void;","highlight_start":1,"highlight_end":36}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":3394,"byte_end":3406,"line_start":102,"line_end":102,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":3394,"byte_end":3406,"line_start":102,"line_end":102,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:102:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bzReadOpen(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        bzerror: *mut std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        f: *mut FILE,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        verbosity_0: std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        nUnused: std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> *mut std::os::raw::c_void;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":3711,"byte_end":3795,"line_start":112,"line_end":112,"column_start":5,"column_end":89,"is_primary":false,"text":[{"text":"    fn BZ2_bzReadClose(bzerror: *mut std::os::raw::c_int, b: *mut std::os::raw::c_void);","highlight_start":5,"highlight_end":89}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":3694,"byte_end":3706,"line_start":111,"line_end":111,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":3694,"byte_end":3706,"line_start":111,"line_end":111,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:111:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bzReadClose(bzerror: *mut std::os::raw::c_int, b: *mut std::os::raw::c_void);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":3817,"byte_end":4019,"line_start":114,"line_end":119,"column_start":5,"column_end":7,"is_primary":false,"text":[{"text":"    fn BZ2_bzReadGetUnused(","highlight_start":5,"highlight_end":28},{"text":"        bzerror: *mut std::os::raw::c_int,","highlight_start":1,"highlight_end":43},{"text":"        b: *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":38},{"text":"        unused: *mut *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":48},{"text":"        nUnused: *mut std::os::raw::c_int,","highlight_start":1,"highlight_end":43},{"text":"    );","highlight_start":1,"highlight_end":7}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":3800,"byte_end":3812,"line_start":113,"line_end":113,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":3800,"byte_end":3812,"line_start":113,"line_end":113,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:113:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bzReadGetUnused(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        bzerror: *mut std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        b: *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        unused: *mut *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        nUnused: *mut std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":4041,"byte_end":4240,"line_start":121,"line_end":126,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    fn BZ2_bzRead(","highlight_start":5,"highlight_end":19},{"text":"        bzerror: *mut std::os::raw::c_int,","highlight_start":1,"highlight_end":43},{"text":"        b: *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":38},{"text":"        buf: *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":40},{"text":"        len: std::os::raw::c_int,","highlight_start":1,"highlight_end":34},{"text":"    ) -> std::os::raw::c_int;","highlight_start":1,"highlight_end":30}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":4024,"byte_end":4036,"line_start":120,"line_end":120,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":4024,"byte_end":4036,"line_start":120,"line_end":120,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:120:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bzRead(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        bzerror: *mut std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        b: *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        buf: *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        len: std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":4262,"byte_end":4513,"line_start":128,"line_end":134,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    fn BZ2_bzWriteOpen(","highlight_start":5,"highlight_end":24},{"text":"        bzerror: *mut std::os::raw::c_int,","highlight_start":1,"highlight_end":43},{"text":"        f: *mut FILE,","highlight_start":1,"highlight_end":22},{"text":"        blockSize100k_0: std::os::raw::c_int,","highlight_start":1,"highlight_end":46},{"text":"        verbosity_0: std::os::raw::c_int,","highlight_start":1,"highlight_end":42},{"text":"        workFactor_0: std::os::raw::c_int,","highlight_start":1,"highlight_end":43},{"text":"    ) -> *mut std::os::raw::c_void;","highlight_start":1,"highlight_end":36}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":4245,"byte_end":4257,"line_start":127,"line_end":127,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":4245,"byte_end":4257,"line_start":127,"line_end":127,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:127:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bzWriteOpen(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        bzerror: *mut std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        f: *mut FILE,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        blockSize100k_0: std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        verbosity_0: std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        workFactor_0: std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> *mut std::os::raw::c_void;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":4535,"byte_end":4712,"line_start":136,"line_end":141,"column_start":5,"column_end":7,"is_primary":false,"text":[{"text":"    fn BZ2_bzWrite(","highlight_start":5,"highlight_end":20},{"text":"        bzerror: *mut std::os::raw::c_int,","highlight_start":1,"highlight_end":43},{"text":"        b: *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":38},{"text":"        buf: *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":40},{"text":"        len: std::os::raw::c_int,","highlight_start":1,"highlight_end":34},{"text":"    );","highlight_start":1,"highlight_end":7}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":4518,"byte_end":4530,"line_start":135,"line_end":135,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":4518,"byte_end":4530,"line_start":135,"line_end":135,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:135:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bzWrite(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        bzerror: *mut std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        b: *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        buf: *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        len: std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":4734,"byte_end":5088,"line_start":143,"line_end":151,"column_start":5,"column_end":7,"is_primary":false,"text":[{"text":"    fn BZ2_bzWriteClose64(","highlight_start":5,"highlight_end":27},{"text":"        bzerror: *mut std::os::raw::c_int,","highlight_start":1,"highlight_end":43},{"text":"        b: *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":38},{"text":"        abandon: std::os::raw::c_int,","highlight_start":1,"highlight_end":38},{"text":"        nbytes_in_lo32: *mut std::os::raw::c_uint,","highlight_start":1,"highlight_end":51},{"text":"        nbytes_in_hi32: *mut std::os::raw::c_uint,","highlight_start":1,"highlight_end":51},{"text":"        nbytes_out_lo32: *mut std::os::raw::c_uint,","highlight_start":1,"highlight_end":52},{"text":"        nbytes_out_hi32: *mut std::os::raw::c_uint,","highlight_start":1,"highlight_end":52},{"text":"    );","highlight_start":1,"highlight_end":7}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":4717,"byte_end":4729,"line_start":142,"line_end":142,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":4717,"byte_end":4729,"line_start":142,"line_end":142,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:142:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bzWriteClose64(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m144\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        bzerror: *mut std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        b: *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m146\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        abandon: std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        nbytes_out_hi32: *mut std::os::raw::c_uint,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    );\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5110,"byte_end":5163,"line_start":153,"line_end":153,"column_start":5,"column_end":58,"is_primary":false,"text":[{"text":"    fn BZ2_bzlibVersion() -> *const std::os::raw::c_char;","highlight_start":5,"highlight_end":58}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5093,"byte_end":5105,"line_start":152,"line_end":152,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5093,"byte_end":5105,"line_start":152,"line_end":152,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:152:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m153\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bzlibVersion() -> *const std::os::raw::c_char;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5185,"byte_end":5280,"line_start":155,"line_end":155,"column_start":5,"column_end":100,"is_primary":false,"text":[{"text":"    fn open(_: *const std::os::raw::c_char, _: std::os::raw::c_int, _: ...) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":100}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5168,"byte_end":5180,"line_start":154,"line_end":154,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5168,"byte_end":5180,"line_start":154,"line_end":154,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:154:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m154\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m155\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn open(_: *const std::os::raw::c_char, _: std::os::raw::c_int, _: ...) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5302,"byte_end":5385,"line_start":157,"line_end":157,"column_start":5,"column_end":88,"is_primary":false,"text":[{"text":"    fn utime(_: *const std::os::raw::c_char, _: *const utimbuf) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":88}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5285,"byte_end":5297,"line_start":156,"line_end":156,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5285,"byte_end":5297,"line_start":156,"line_end":156,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:156:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m156\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m157\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn utime(_: *const std::os::raw::c_char, _: *const utimbuf) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5407,"byte_end":5445,"line_start":159,"line_end":159,"column_start":5,"column_end":43,"is_primary":false,"text":[{"text":"    fn _exit(_: std::os::raw::c_int) -> !;","highlight_start":5,"highlight_end":43}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5390,"byte_end":5402,"line_start":158,"line_end":158,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5390,"byte_end":5402,"line_start":158,"line_end":158,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:158:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m159\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn _exit(_: std::os::raw::c_int) -> !;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5467,"byte_end":5523,"line_start":161,"line_end":161,"column_start":5,"column_end":61,"is_primary":false,"text":[{"text":"    fn close(_: std::os::raw::c_int) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":61}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5450,"byte_end":5462,"line_start":160,"line_end":160,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5450,"byte_end":5462,"line_start":160,"line_end":160,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:160:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m160\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m161\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn close(_: std::os::raw::c_int) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5545,"byte_end":5602,"line_start":163,"line_end":163,"column_start":5,"column_end":62,"is_primary":false,"text":[{"text":"    fn isatty(_: std::os::raw::c_int) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":62}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5528,"byte_end":5540,"line_start":162,"line_end":162,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5528,"byte_end":5540,"line_start":162,"line_end":162,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:162:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn isatty(_: std::os::raw::c_int) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5624,"byte_end":5755,"line_start":165,"line_end":169,"column_start":5,"column_end":18,"is_primary":false,"text":[{"text":"    fn write(","highlight_start":5,"highlight_end":14},{"text":"        __fd: std::os::raw::c_int,","highlight_start":1,"highlight_end":35},{"text":"        __buf: *const std::os::raw::c_void,","highlight_start":1,"highlight_end":44},{"text":"        __nbyte: size_t,","highlight_start":1,"highlight_end":25},{"text":"    ) -> ssize_t;","highlight_start":1,"highlight_end":18}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5607,"byte_end":5619,"line_start":164,"line_end":164,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5607,"byte_end":5619,"line_start":164,"line_end":164,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:164:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn write(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        __fd: std::os::raw::c_int,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        __buf: *const std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        __nbyte: size_t,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m169\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> ssize_t;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5777,"byte_end":5854,"line_start":171,"line_end":171,"column_start":5,"column_end":82,"is_primary":false,"text":[{"text":"    fn fchown(_: std::os::raw::c_int, _: uid_t, _: gid_t) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":82}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5760,"byte_end":5772,"line_start":170,"line_end":170,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5760,"byte_end":5772,"line_start":170,"line_end":170,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:170:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m170\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m171\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fchown(_: std::os::raw::c_int, _: uid_t, _: gid_t) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5876,"byte_end":5944,"line_start":173,"line_end":173,"column_start":5,"column_end":73,"is_primary":false,"text":[{"text":"    fn fchmod(_: std::os::raw::c_int, _: mode_t) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":73}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5859,"byte_end":5871,"line_start":172,"line_end":172,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5859,"byte_end":5871,"line_start":172,"line_end":172,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:172:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m173\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fchmod(_: std::os::raw::c_int, _: mode_t) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":5966,"byte_end":6044,"line_start":175,"line_end":175,"column_start":5,"column_end":83,"is_primary":false,"text":[{"text":"    fn lstat(_: *const std::os::raw::c_char, _: *mut stat) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":83}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":5949,"byte_end":5961,"line_start":174,"line_end":174,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":5949,"byte_end":5961,"line_start":174,"line_end":174,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:174:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn lstat(_: *const std::os::raw::c_char, _: *mut stat) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2.rs","byte_start":6066,"byte_end":6143,"line_start":177,"line_end":177,"column_start":5,"column_end":82,"is_primary":false,"text":[{"text":"    fn stat(_: *const std::os::raw::c_char, _: *mut stat) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":82}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2.rs","byte_start":6049,"byte_end":6061,"line_start":176,"line_end":176,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2.rs","byte_start":6049,"byte_end":6061,"line_start":176,"line_end":176,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2.rs:176:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m176\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn stat(_: *const std::os::raw::c_char, _: *mut stat) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":57,"byte_end":89,"line_start":4,"line_end":4,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    static mut __stderrp: *mut FILE;","highlight_start":5,"highlight_end":37}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":40,"byte_end":52,"line_start":3,"line_end":3,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":40,"byte_end":52,"line_start":3,"line_end":3,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stderrp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":111,"byte_end":158,"line_start":6,"line_end":6,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn fclose(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":94,"byte_end":106,"line_start":5,"line_end":5,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":94,"byte_end":106,"line_start":5,"line_end":5,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fclose(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":180,"byte_end":227,"line_start":8,"line_end":8,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn fflush(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":163,"byte_end":175,"line_start":7,"line_end":7,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":163,"byte_end":175,"line_start":7,"line_end":7,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fflush(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":249,"byte_end":335,"line_start":10,"line_end":10,"column_start":5,"column_end":91,"is_primary":false,"text":[{"text":"    fn fopen(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> *mut FILE;","highlight_start":5,"highlight_end":91}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":232,"byte_end":244,"line_start":9,"line_end":9,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":232,"byte_end":244,"line_start":9,"line_end":9,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:9:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fopen(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> *mut FILE;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":357,"byte_end":445,"line_start":12,"line_end":12,"column_start":5,"column_end":93,"is_primary":false,"text":[{"text":"    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":93}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":340,"byte_end":352,"line_start":11,"line_end":11,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":340,"byte_end":352,"line_start":11,"line_end":11,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":467,"byte_end":512,"line_start":14,"line_end":14,"column_start":5,"column_end":50,"is_primary":false,"text":[{"text":"    fn getc(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":50}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":450,"byte_end":462,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":450,"byte_end":462,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn getc(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":534,"byte_end":576,"line_start":16,"line_end":16,"column_start":5,"column_end":47,"is_primary":false,"text":[{"text":"    fn perror(_: *const std::os::raw::c_char);","highlight_start":5,"highlight_end":47}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":517,"byte_end":529,"line_start":15,"line_end":15,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":517,"byte_end":529,"line_start":15,"line_end":15,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:15:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn perror(_: *const std::os::raw::c_char);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":598,"byte_end":667,"line_start":18,"line_end":18,"column_start":5,"column_end":74,"is_primary":false,"text":[{"text":"    fn putc(_: std::os::raw::c_int, _: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":74}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":581,"byte_end":593,"line_start":17,"line_end":17,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":581,"byte_end":593,"line_start":17,"line_end":17,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:17:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn putc(_: std::os::raw::c_int, _: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":689,"byte_end":823,"line_start":20,"line_end":24,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    fn sprintf(","highlight_start":5,"highlight_end":16},{"text":"        _: *mut std::os::raw::c_char,","highlight_start":1,"highlight_end":38},{"text":"        _: *const std::os::raw::c_char,","highlight_start":1,"highlight_end":40},{"text":"        _: ...","highlight_start":1,"highlight_end":15},{"text":"    ) -> std::os::raw::c_int;","highlight_start":1,"highlight_end":30}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":672,"byte_end":684,"line_start":19,"line_end":19,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":672,"byte_end":684,"line_start":19,"line_end":19,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:19:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn sprintf(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: ...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":845,"byte_end":886,"line_start":26,"line_end":26,"column_start":5,"column_end":46,"is_primary":false,"text":[{"text":"    fn __error() -> *mut std::os::raw::c_int;","highlight_start":5,"highlight_end":46}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":828,"byte_end":840,"line_start":25,"line_end":25,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":828,"byte_end":840,"line_start":25,"line_end":25,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:25:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn __error() -> *mut std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":908,"byte_end":973,"line_start":28,"line_end":28,"column_start":5,"column_end":70,"is_primary":false,"text":[{"text":"    fn malloc(_: std::os::raw::c_ulong) -> *mut std::os::raw::c_void;","highlight_start":5,"highlight_end":70}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":891,"byte_end":903,"line_start":27,"line_end":27,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":891,"byte_end":903,"line_start":27,"line_end":27,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:27:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn malloc(_: std::os::raw::c_ulong) -> *mut std::os::raw::c_void;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":995,"byte_end":1033,"line_start":30,"line_end":30,"column_start":5,"column_end":43,"is_primary":false,"text":[{"text":"    fn free(_: *mut std::os::raw::c_void);","highlight_start":5,"highlight_end":43}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":978,"byte_end":990,"line_start":29,"line_end":29,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":978,"byte_end":990,"line_start":29,"line_end":29,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:29:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn free(_: *mut std::os::raw::c_void);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":1055,"byte_end":1092,"line_start":32,"line_end":32,"column_start":5,"column_end":42,"is_primary":false,"text":[{"text":"    fn exit(_: std::os::raw::c_int) -> !;","highlight_start":5,"highlight_end":42}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":1038,"byte_end":1050,"line_start":31,"line_end":31,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":1038,"byte_end":1050,"line_start":31,"line_end":31,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:31:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn exit(_: std::os::raw::c_int) -> !;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":1114,"byte_end":1238,"line_start":34,"line_end":37,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    fn strcat(","highlight_start":5,"highlight_end":15},{"text":"        _: *mut std::os::raw::c_char,","highlight_start":1,"highlight_end":38},{"text":"        _: *const std::os::raw::c_char,","highlight_start":1,"highlight_end":40},{"text":"    ) -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":36}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":1097,"byte_end":1109,"line_start":33,"line_end":33,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":1097,"byte_end":1109,"line_start":33,"line_end":33,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:33:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strcat(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":1260,"byte_end":1384,"line_start":39,"line_end":42,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    fn strcpy(","highlight_start":5,"highlight_end":15},{"text":"        _: *mut std::os::raw::c_char,","highlight_start":1,"highlight_end":38},{"text":"        _: *const std::os::raw::c_char,","highlight_start":1,"highlight_end":40},{"text":"    ) -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":36}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":1243,"byte_end":1255,"line_start":38,"line_end":38,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":1243,"byte_end":1255,"line_start":38,"line_end":38,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:38:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strcpy(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":1406,"byte_end":1473,"line_start":44,"line_end":44,"column_start":5,"column_end":72,"is_primary":false,"text":[{"text":"    fn strlen(_: *const std::os::raw::c_char) -> std::os::raw::c_ulong;","highlight_start":5,"highlight_end":72}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":1389,"byte_end":1401,"line_start":43,"line_end":43,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":1389,"byte_end":1401,"line_start":43,"line_end":43,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:43:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strlen(_: *const std::os::raw::c_char) -> std::os::raw::c_ulong;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":1495,"byte_end":1654,"line_start":46,"line_end":50,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    fn strncpy(","highlight_start":5,"highlight_end":16},{"text":"        _: *mut std::os::raw::c_char,","highlight_start":1,"highlight_end":38},{"text":"        _: *const std::os::raw::c_char,","highlight_start":1,"highlight_end":40},{"text":"        _: std::os::raw::c_ulong,","highlight_start":1,"highlight_end":34},{"text":"    ) -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":36}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":1478,"byte_end":1490,"line_start":45,"line_end":45,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":1478,"byte_end":1490,"line_start":45,"line_end":45,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:45:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strncpy(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzip2recover.rs","byte_start":1676,"byte_end":1780,"line_start":52,"line_end":53,"column_start":5,"column_end":38,"is_primary":false,"text":[{"text":"    fn strrchr(_: *const std::os::raw::c_char, _: std::os::raw::c_int)","highlight_start":5,"highlight_end":71},{"text":"        -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":38}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzip2recover.rs","byte_start":1659,"byte_end":1671,"line_start":51,"line_end":51,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzip2recover.rs","byte_start":1659,"byte_end":1671,"line_start":51,"line_end":51,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzip2recover.rs:51:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strrchr(_: *const std::os::raw::c_char, _: std::os::raw::c_int)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":57,"byte_end":88,"line_start":4,"line_end":4,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    static mut __stdinp: *mut FILE;","highlight_start":5,"highlight_end":36}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":40,"byte_end":52,"line_start":3,"line_end":3,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":40,"byte_end":52,"line_start":3,"line_end":3,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stdinp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":110,"byte_end":142,"line_start":6,"line_end":6,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    static mut __stdoutp: *mut FILE;","highlight_start":5,"highlight_end":37}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":93,"byte_end":105,"line_start":5,"line_end":5,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":93,"byte_end":105,"line_start":5,"line_end":5,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stdoutp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":164,"byte_end":196,"line_start":8,"line_end":8,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    static mut __stderrp: *mut FILE;","highlight_start":5,"highlight_end":37}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":147,"byte_end":159,"line_start":7,"line_end":7,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":147,"byte_end":159,"line_start":7,"line_end":7,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stderrp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":218,"byte_end":265,"line_start":10,"line_end":10,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn fclose(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":201,"byte_end":213,"line_start":9,"line_end":9,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":201,"byte_end":213,"line_start":9,"line_end":9,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:9:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fclose(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":287,"byte_end":334,"line_start":12,"line_end":12,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn ferror(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":270,"byte_end":282,"line_start":11,"line_end":11,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":270,"byte_end":282,"line_start":11,"line_end":11,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn ferror(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":356,"byte_end":403,"line_start":14,"line_end":14,"column_start":5,"column_end":52,"is_primary":false,"text":[{"text":"    fn fflush(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":52}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":339,"byte_end":351,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":339,"byte_end":351,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fflush(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":425,"byte_end":471,"line_start":16,"line_end":16,"column_start":5,"column_end":51,"is_primary":false,"text":[{"text":"    fn fgetc(_: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":51}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":408,"byte_end":420,"line_start":15,"line_end":15,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":408,"byte_end":420,"line_start":15,"line_end":15,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:15:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fgetc(_: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":493,"byte_end":579,"line_start":18,"line_end":18,"column_start":5,"column_end":91,"is_primary":false,"text":[{"text":"    fn fopen(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> *mut FILE;","highlight_start":5,"highlight_end":91}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":476,"byte_end":488,"line_start":17,"line_end":17,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":476,"byte_end":488,"line_start":17,"line_end":17,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:17:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fopen(_: *const std::os::raw::c_char, _: *const std::os::raw::c_char) -> *mut FILE;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":601,"byte_end":689,"line_start":20,"line_end":20,"column_start":5,"column_end":93,"is_primary":false,"text":[{"text":"    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":93}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":584,"byte_end":596,"line_start":19,"line_end":19,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":584,"byte_end":596,"line_start":19,"line_end":19,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:19:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":711,"byte_end":880,"line_start":22,"line_end":27,"column_start":5,"column_end":32,"is_primary":false,"text":[{"text":"    fn fread(","highlight_start":5,"highlight_end":14},{"text":"        _: *mut std::os::raw::c_void,","highlight_start":1,"highlight_end":38},{"text":"        _: std::os::raw::c_ulong,","highlight_start":1,"highlight_end":34},{"text":"        _: std::os::raw::c_ulong,","highlight_start":1,"highlight_end":34},{"text":"        _: *mut FILE,","highlight_start":1,"highlight_end":22},{"text":"    ) -> std::os::raw::c_ulong;","highlight_start":1,"highlight_end":32}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":694,"byte_end":706,"line_start":21,"line_end":21,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":694,"byte_end":706,"line_start":21,"line_end":21,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:21:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fread(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut FILE,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> std::os::raw::c_ulong;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_______________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":902,"byte_end":1074,"line_start":29,"line_end":34,"column_start":5,"column_end":32,"is_primary":false,"text":[{"text":"    fn fwrite(","highlight_start":5,"highlight_end":15},{"text":"        _: *const std::os::raw::c_void,","highlight_start":1,"highlight_end":40},{"text":"        _: std::os::raw::c_ulong,","highlight_start":1,"highlight_end":34},{"text":"        _: std::os::raw::c_ulong,","highlight_start":1,"highlight_end":34},{"text":"        _: *mut FILE,","highlight_start":1,"highlight_end":22},{"text":"    ) -> std::os::raw::c_ulong;","highlight_start":1,"highlight_end":32}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":885,"byte_end":897,"line_start":28,"line_end":28,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":885,"byte_end":897,"line_start":28,"line_end":28,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:28:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fwrite(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_void,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: std::os::raw::c_ulong,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut FILE,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> std::os::raw::c_ulong;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_______________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1096,"byte_end":1167,"line_start":36,"line_end":36,"column_start":5,"column_end":76,"is_primary":false,"text":[{"text":"    fn ungetc(_: std::os::raw::c_int, _: *mut FILE) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":76}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1079,"byte_end":1091,"line_start":35,"line_end":35,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1079,"byte_end":1091,"line_start":35,"line_end":35,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:35:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn ungetc(_: std::os::raw::c_int, _: *mut FILE) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1189,"byte_end":1254,"line_start":38,"line_end":38,"column_start":5,"column_end":70,"is_primary":false,"text":[{"text":"    fn malloc(_: std::os::raw::c_ulong) -> *mut std::os::raw::c_void;","highlight_start":5,"highlight_end":70}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1172,"byte_end":1184,"line_start":37,"line_end":37,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1172,"byte_end":1184,"line_start":37,"line_end":37,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:37:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn malloc(_: std::os::raw::c_ulong) -> *mut std::os::raw::c_void;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1276,"byte_end":1314,"line_start":40,"line_end":40,"column_start":5,"column_end":43,"is_primary":false,"text":[{"text":"    fn free(_: *mut std::os::raw::c_void);","highlight_start":5,"highlight_end":43}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1259,"byte_end":1271,"line_start":39,"line_end":39,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1259,"byte_end":1271,"line_start":39,"line_end":39,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:39:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn free(_: *mut std::os::raw::c_void);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1336,"byte_end":1373,"line_start":42,"line_end":42,"column_start":5,"column_end":42,"is_primary":false,"text":[{"text":"    fn exit(_: std::os::raw::c_int) -> !;","highlight_start":5,"highlight_end":42}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1319,"byte_end":1331,"line_start":41,"line_end":41,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1319,"byte_end":1331,"line_start":41,"line_end":41,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:41:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn exit(_: std::os::raw::c_int) -> !;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1395,"byte_end":1474,"line_start":44,"line_end":44,"column_start":5,"column_end":84,"is_primary":false,"text":[{"text":"    fn fdopen(_: std::os::raw::c_int, _: *const std::os::raw::c_char) -> *mut FILE;","highlight_start":5,"highlight_end":84}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1378,"byte_end":1390,"line_start":43,"line_end":43,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1378,"byte_end":1390,"line_start":43,"line_end":43,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:43:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fdopen(_: std::os::raw::c_int, _: *const std::os::raw::c_char) -> *mut FILE;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1496,"byte_end":1539,"line_start":46,"line_end":46,"column_start":5,"column_end":48,"is_primary":false,"text":[{"text":"    static mut _DefaultRuneLocale: _RuneLocale;","highlight_start":5,"highlight_end":48}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1479,"byte_end":1491,"line_start":45,"line_end":45,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1479,"byte_end":1491,"line_start":45,"line_end":45,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:45:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut _DefaultRuneLocale: _RuneLocale;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1561,"byte_end":1685,"line_start":48,"line_end":51,"column_start":5,"column_end":36,"is_primary":false,"text":[{"text":"    fn strcat(","highlight_start":5,"highlight_end":15},{"text":"        _: *mut std::os::raw::c_char,","highlight_start":1,"highlight_end":38},{"text":"        _: *const std::os::raw::c_char,","highlight_start":1,"highlight_end":40},{"text":"    ) -> *mut std::os::raw::c_char;","highlight_start":1,"highlight_end":36}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1544,"byte_end":1556,"line_start":47,"line_end":47,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1544,"byte_end":1556,"line_start":47,"line_end":47,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:47:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strcat(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> *mut std::os::raw::c_char;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|___________________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1707,"byte_end":1827,"line_start":53,"line_end":56,"column_start":5,"column_end":30,"is_primary":false,"text":[{"text":"    fn strcmp(","highlight_start":5,"highlight_end":15},{"text":"        _: *const std::os::raw::c_char,","highlight_start":1,"highlight_end":40},{"text":"        _: *const std::os::raw::c_char,","highlight_start":1,"highlight_end":40},{"text":"    ) -> std::os::raw::c_int;","highlight_start":1,"highlight_end":30}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1690,"byte_end":1702,"line_start":52,"line_end":52,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1690,"byte_end":1702,"line_start":52,"line_end":52,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:52:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn strcmp(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *const std::os::raw::c_char,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_____________________________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1849,"byte_end":1895,"line_start":58,"line_end":58,"column_start":5,"column_end":51,"is_primary":false,"text":[{"text":"    fn BZ2_compressBlock(_: *mut EState, _: Bool);","highlight_start":5,"highlight_end":51}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1832,"byte_end":1844,"line_start":57,"line_end":57,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1832,"byte_end":1844,"line_start":57,"line_end":57,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:57:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_compressBlock(_: *mut EState, _: Bool);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1917,"byte_end":1958,"line_start":60,"line_end":60,"column_start":5,"column_end":46,"is_primary":false,"text":[{"text":"    static mut BZ2_crc32Table: [UInt32; 256];","highlight_start":5,"highlight_end":46}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1900,"byte_end":1912,"line_start":59,"line_end":59,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1900,"byte_end":1912,"line_start":59,"line_end":59,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:59:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut BZ2_crc32Table: [UInt32; 256];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":1980,"byte_end":2023,"line_start":62,"line_end":62,"column_start":5,"column_end":48,"is_primary":false,"text":[{"text":"    fn BZ2_decompress(_: *mut DState) -> Int32;","highlight_start":5,"highlight_end":48}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":1963,"byte_end":1975,"line_start":61,"line_end":61,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":1963,"byte_end":1975,"line_start":61,"line_end":61,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:61:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_decompress(_: *mut DState) -> Int32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"bzlib.rs","byte_start":2045,"byte_end":2080,"line_start":64,"line_end":64,"column_start":5,"column_end":40,"is_primary":false,"text":[{"text":"    static mut BZ2_rNums: [Int32; 512];","highlight_start":5,"highlight_end":40}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"bzlib.rs","byte_start":2028,"byte_end":2040,"line_start":63,"line_end":63,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"bzlib.rs","byte_start":2028,"byte_end":2040,"line_start":63,"line_end":63,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mbzlib.rs:63:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut BZ2_rNums: [Int32; 512];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"compress.rs","byte_start":57,"byte_end":145,"line_start":4,"line_end":4,"column_start":5,"column_end":93,"is_primary":false,"text":[{"text":"    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":93}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"compress.rs","byte_start":40,"byte_end":52,"line_start":3,"line_end":3,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"compress.rs","byte_start":40,"byte_end":52,"line_start":3,"line_end":3,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcompress.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"compress.rs","byte_start":167,"byte_end":199,"line_start":6,"line_end":6,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    static mut __stderrp: *mut FILE;","highlight_start":5,"highlight_end":37}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"compress.rs","byte_start":150,"byte_end":162,"line_start":5,"line_end":5,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"compress.rs","byte_start":150,"byte_end":162,"line_start":5,"line_end":5,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcompress.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stderrp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"compress.rs","byte_start":221,"byte_end":276,"line_start":8,"line_end":8,"column_start":5,"column_end":60,"is_primary":false,"text":[{"text":"    fn BZ2_bz__AssertH__fail(errcode: std::os::raw::c_int);","highlight_start":5,"highlight_end":60}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"compress.rs","byte_start":204,"byte_end":216,"line_start":7,"line_end":7,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"compress.rs","byte_start":204,"byte_end":216,"line_start":7,"line_end":7,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcompress.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bz__AssertH__fail(errcode: std::os::raw::c_int);\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"compress.rs","byte_start":298,"byte_end":331,"line_start":10,"line_end":10,"column_start":5,"column_end":38,"is_primary":false,"text":[{"text":"    fn BZ2_blockSort(_: *mut EState);","highlight_start":5,"highlight_end":38}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"compress.rs","byte_start":281,"byte_end":293,"line_start":9,"line_end":9,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"compress.rs","byte_start":281,"byte_end":293,"line_start":9,"line_end":9,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcompress.rs:9:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_blockSort(_: *mut EState);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"compress.rs","byte_start":353,"byte_end":434,"line_start":12,"line_end":12,"column_start":5,"column_end":86,"is_primary":false,"text":[{"text":"    fn BZ2_hbAssignCodes(_: *mut Int32, _: *mut UChar, _: Int32, _: Int32, _: Int32);","highlight_start":5,"highlight_end":86}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"compress.rs","byte_start":336,"byte_end":348,"line_start":11,"line_end":11,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"compress.rs","byte_start":336,"byte_end":348,"line_start":11,"line_end":11,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcompress.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_hbAssignCodes(_: *mut Int32, _: *mut UChar, _: Int32, _: Int32, _: Int32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"compress.rs","byte_start":456,"byte_end":531,"line_start":14,"line_end":14,"column_start":5,"column_end":80,"is_primary":false,"text":[{"text":"    fn BZ2_hbMakeCodeLengths(_: *mut UChar, _: *mut Int32, _: Int32, _: Int32);","highlight_start":5,"highlight_end":80}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"compress.rs","byte_start":439,"byte_end":451,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"compress.rs","byte_start":439,"byte_end":451,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mcompress.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_hbMakeCodeLengths(_: *mut UChar, _: *mut Int32, _: Int32, _: Int32);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":57,"byte_end":89,"line_start":4,"line_end":4,"column_start":5,"column_end":37,"is_primary":false,"text":[{"text":"    static mut __stderrp: *mut FILE;","highlight_start":5,"highlight_end":37}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"decompress.rs","byte_start":40,"byte_end":52,"line_start":3,"line_end":3,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":40,"byte_end":52,"line_start":3,"line_end":3,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut __stderrp: *mut FILE;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":111,"byte_end":199,"line_start":6,"line_end":6,"column_start":5,"column_end":93,"is_primary":false,"text":[{"text":"    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;","highlight_start":5,"highlight_end":93}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"decompress.rs","byte_start":94,"byte_end":106,"line_start":5,"line_end":5,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":94,"byte_end":106,"line_start":5,"line_end":5,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn fprintf(_: *mut FILE, _: *const std::os::raw::c_char, _: ...) -> std::os::raw::c_int;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":221,"byte_end":276,"line_start":8,"line_end":8,"column_start":5,"column_end":60,"is_primary":false,"text":[{"text":"    fn BZ2_bz__AssertH__fail(errcode: std::os::raw::c_int);","highlight_start":5,"highlight_end":60}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"decompress.rs","byte_start":204,"byte_end":216,"line_start":7,"line_end":7,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":204,"byte_end":216,"line_start":7,"line_end":7,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bz__AssertH__fail(errcode: std::os::raw::c_int);\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign static","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":298,"byte_end":333,"line_start":10,"line_end":10,"column_start":5,"column_end":40,"is_primary":false,"text":[{"text":"    static mut BZ2_rNums: [Int32; 512];","highlight_start":5,"highlight_end":40}],"label":"foreign static","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"decompress.rs","byte_start":281,"byte_end":293,"line_start":9,"line_end":9,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":281,"byte_end":293,"line_start":9,"line_end":9,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign static\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:9:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    static mut BZ2_rNums: [Int32; 512];\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign static\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":355,"byte_end":407,"line_start":12,"line_end":12,"column_start":5,"column_end":57,"is_primary":false,"text":[{"text":"    fn BZ2_indexIntoF(_: Int32, _: *mut Int32) -> Int32;","highlight_start":5,"highlight_end":57}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"decompress.rs","byte_start":338,"byte_end":350,"line_start":11,"line_end":11,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":338,"byte_end":350,"line_start":11,"line_end":11,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_indexIntoF(_: Int32, _: *mut Int32) -> Int32;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"decompress.rs","byte_start":429,"byte_end":610,"line_start":14,"line_end":22,"column_start":5,"column_end":7,"is_primary":false,"text":[{"text":"    fn BZ2_hbCreateDecodeTables(","highlight_start":5,"highlight_end":33},{"text":"        _: *mut Int32,","highlight_start":1,"highlight_end":23},{"text":"        _: *mut Int32,","highlight_start":1,"highlight_end":23},{"text":"        _: *mut Int32,","highlight_start":1,"highlight_end":23},{"text":"        _: *mut UChar,","highlight_start":1,"highlight_end":23},{"text":"        _: Int32,","highlight_start":1,"highlight_end":18},{"text":"        _: Int32,","highlight_start":1,"highlight_end":18},{"text":"        _: Int32,","highlight_start":1,"highlight_end":18},{"text":"    );","highlight_start":1,"highlight_end":7}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"decompress.rs","byte_start":412,"byte_end":424,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"decompress.rs","byte_start":412,"byte_end":424,"line_start":13,"line_end":13,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mdecompress.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_hbCreateDecodeTables(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut Int32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut Int32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: *mut Int32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        _: Int32,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    );\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|______-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#[no_mangle]` has no effect on a foreign function","code":{"code":"unused_attributes","explanation":null},"level":"warning","spans":[{"file_name":"huffman.rs","byte_start":34,"byte_end":89,"line_start":3,"line_end":3,"column_start":5,"column_end":60,"is_primary":false,"text":[{"text":"    fn BZ2_bz__AssertH__fail(errcode: std::os::raw::c_int);","highlight_start":5,"highlight_end":60}],"label":"foreign function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"huffman.rs","byte_start":17,"byte_end":29,"line_start":2,"line_end":2,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!","code":null,"level":"warning","spans":[],"children":[],"rendered":null},{"message":"symbol names in extern blocks are not mangled","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this attribute","code":null,"level":"help","spans":[{"file_name":"huffman.rs","byte_start":17,"byte_end":29,"line_start":2,"line_end":2,"column_start":5,"column_end":17,"is_primary":true,"text":[{"text":"    #[no_mangle]","highlight_start":5,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: `#[no_mangle]` has no effect on a foreign function\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mhuffman.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    #[no_mangle]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: remove this attribute\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn BZ2_bz__AssertH__fail(errcode: std::os::raw::c_int);\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-------------------------------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mforeign function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mwarning\u001b[0m\u001b[0m: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: symbol names in extern blocks are not mangled\u001b[0m\n\n"}
{"message":"`#![feature]` may not be used on the stable release channel","code":{"code":"E0554","explanation":"Feature attributes are only allowed on the nightly release channel. Stable or\nbeta compilers will not comply.\n\nErroneous code example:\n\n```ignore (depends on release channel)\n#![feature(lang_items)] // error: `#![feature]` may not be used on the\n                        //        stable release channel\n```\n\nIf you need the feature, make sure to use a nightly release of the compiler\n(but be warned that the feature may be removed or altered in the future).\n"},"level":"error","spans":[{"file_name":"c2rust-lib.rs","byte_start":337,"byte_end":352,"line_start":13,"line_end":13,"column_start":12,"column_end":27,"is_primary":true,"text":[{"text":"#![feature(core_intrinsics)]","highlight_start":12,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0554]\u001b[0m\u001b[0m\u001b[1m: `#![feature]` may not be used on the stable release channel\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mc2rust-lib.rs:13:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(core_intrinsics)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 7 previous errors; 164 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 7 previous errors; 164 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0554`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0554`.\u001b[0m\n"}
